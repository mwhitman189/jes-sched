{"ast":null,"code":"import _defineProperty from \"/home/miles/webdev/jes-sched/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/miles/webdev/jes-sched/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/src/components/Schedule.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport { WorkWeek } from \"./CustomView\";\nimport EventForm from \"./EventForm\";\nimport useToggle from \"../hooks/useToggle\";\nimport useFormState from \"../hooks/useFormState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport eventsList from \"../events\";\nimport teachersList from \"../teachers\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\n\nconst Schedule = () => {\n  const _useState = useState(eventsList),\n        _useState2 = _slicedToArray(_useState, 2),\n        events = _useState2[0],\n        setEvents = _useState2[1];\n\n  const _useState3 = useState(teachersList),\n        _useState4 = _slicedToArray(_useState3, 2),\n        teacherList = _useState4[0],\n        setTeacherList = _useState4[1];\n\n  const _useFormState = useFormState(new Date()),\n        _useFormState2 = _slicedToArray(_useFormState, 3),\n        startTime = _useFormState2[0],\n        handleStartTimeChange = _useFormState2[1],\n        startTimeReset = _useFormState2[2];\n\n  const _useToggle = useToggle(false),\n        _useToggle2 = _slicedToArray(_useToggle, 2),\n        isOpen = _useToggle2[0],\n        toggleIsOpen = _useToggle2[1]; // Limit displayed hours of the day\n\n\n  const minTime = new Date();\n  minTime.setHours(9, 0, 0);\n  const maxTime = new Date();\n  maxTime.setHours(21, 0, 0);\n  useEffect(() => {\n    addTeachingMins();\n  }, [events]);\n\n  const addTeachingMins = () => {\n    teacherList.forEach(teacher => {\n      return teacher.teachingMins = 0;\n    });\n    events.forEach(e => {\n      const index = teacherList.findIndex(teacher => teacher.resourceId === e.resourceId); // Reset teaching minutes to \"0\", then add all teaching minutes to the corresponding instructor\n\n      teacherList[index].teachingMins += parseInt(e.duration);\n      setTeacherList([...teacherList]);\n      teacherList[index].resourceTitle = \"\".concat(teacherList[index].name, \" \").concat(teacherList[index].teachingMins);\n    });\n  }; // TODO: Add a function to open the new class form with the current data populated, for validation\n\n\n  const moveEvent = ({\n    event,\n    resourceId,\n    start,\n    end\n  }) => {\n    console.log(events, event.room, start, parseInt(event.duration));\n\n    if (!validateRoom(events, room, start, parseInt(event.duration))) {\n      console.log(\"Room Conflict at: \", room, start);\n    } else {\n      const idx = events.indexOf(event);\n\n      const updatedEvent = _objectSpread({}, event, {\n        resourceId,\n        start,\n        end,\n        room\n      });\n\n      const nextEvents = [...events];\n      nextEvents.splice(idx, 1, updatedEvent);\n      setEvents(nextEvents); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  };\n\n  const handleUpdate = ({\n    event,\n    resourceId,\n    start,\n    end\n  }) => {\n    moveEvent({\n      event,\n      resourceId,\n      start,\n      end\n    });\n  };\n\n  const handleSelect = ({\n    start\n  }) => {\n    toggleIsOpen();\n    handleStartTimeChange(start);\n  };\n\n  const addEvent = newEvent => {\n    setEvents([...events, newEvent]);\n  };\n\n  const handleAddEvent = newEvent => {\n    addEvent(newEvent);\n    toggleIsOpen();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, isOpen && React.createElement(EventForm, {\n    isOpen: isOpen,\n    toggleIsOpen: toggleIsOpen,\n    addEvent: handleAddEvent,\n    addTeachingMins: addTeachingMins,\n    events: events,\n    teacherList: teacherList,\n    startTime: startTime,\n    handleStartTimeChange: handleStartTimeChange,\n    startTimeReset: startTimeReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(DragAndDropCalendar, {\n    style: {\n      width: \"95vw\",\n      maxHeight: \"100%\"\n    },\n    localizer: localizer,\n    views: {\n      week: WorkWeek,\n      day: true\n    },\n    defaultView: \"day\",\n    events: events,\n    onEventDrop: handleUpdate,\n    startAccessor: \"start\",\n    endAccessor: \"end\",\n    resources: teacherList,\n    resourceIdAccessor: \"resourceId\",\n    resourceTitleAccessor: \"resourceTitle\",\n    selectable: true,\n    eventPropGetter: // Hide a dummy event that fixes drag and drop bug\n    event => {\n      if (event.hide) {\n        return {\n          style: {\n            display: \"none\"\n          }\n        };\n      }\n    },\n    step: 30,\n    timeslots: 2,\n    min: minTime,\n    max: maxTime,\n    onSelectSlot: handleSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }));\n};\n\nexport default Schedule;","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/src/components/Schedule.js"],"names":["React","useState","useEffect","Calendar","momentLocalizer","withDragAndDrop","moment","WorkWeek","EventForm","useToggle","useFormState","validateRoom","validateTeacher","eventsList","teachersList","localizer","DragAndDropCalendar","Schedule","events","setEvents","teacherList","setTeacherList","Date","startTime","handleStartTimeChange","startTimeReset","isOpen","toggleIsOpen","minTime","setHours","maxTime","addTeachingMins","forEach","teacher","teachingMins","e","index","findIndex","resourceId","parseInt","duration","resourceTitle","name","moveEvent","event","start","end","console","log","room","idx","indexOf","updatedEvent","nextEvents","splice","handleUpdate","handleSelect","addEvent","newEvent","handleAddEvent","width","maxHeight","week","day","hide","style","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\n\nimport { WorkWeek } from \"./CustomView\";\nimport EventForm from \"./EventForm\";\nimport useToggle from \"../hooks/useToggle\";\nimport useFormState from \"../hooks/useFormState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport eventsList from \"../events\";\nimport teachersList from \"../teachers\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\n\nconst Schedule = () => {\n  const [events, setEvents] = useState(eventsList);\n  const [teacherList, setTeacherList] = useState(teachersList);\n  const [startTime, handleStartTimeChange, startTimeReset] = useFormState(\n    new Date()\n  );\n  const [isOpen, toggleIsOpen] = useToggle(false);\n\n  // Limit displayed hours of the day\n  const minTime = new Date();\n  minTime.setHours(9, 0, 0);\n  const maxTime = new Date();\n  maxTime.setHours(21, 0, 0);\n\n  useEffect(() => {\n    addTeachingMins();\n  }, [events]);\n\n  const addTeachingMins = () => {\n    teacherList.forEach(teacher => {\n      return (teacher.teachingMins = 0);\n    });\n    events.forEach(e => {\n      const index = teacherList.findIndex(\n        teacher => teacher.resourceId === e.resourceId\n      );\n      // Reset teaching minutes to \"0\", then add all teaching minutes to the corresponding instructor\n      teacherList[index].teachingMins += parseInt(e.duration);\n      setTeacherList([...teacherList]);\n      teacherList[\n        index\n      ].resourceTitle = `${teacherList[index].name} ${teacherList[index].teachingMins}`;\n    });\n  };\n\n  // TODO: Add a function to open the new class form with the current data populated, for validation\n  const moveEvent = ({ event, resourceId, start, end }) => {\n    console.log(events, event.room, start, parseInt(event.duration));\n    if (!validateRoom(events, room, start, parseInt(event.duration))) {\n      console.log(\"Room Conflict at: \", room, start);\n    } else {\n      const idx = events.indexOf(event);\n\n      const updatedEvent = { ...event, resourceId, start, end, room };\n\n      const nextEvents = [...events];\n      nextEvents.splice(idx, 1, updatedEvent);\n\n      setEvents(nextEvents);\n      // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  };\n\n  const handleUpdate = ({ event, resourceId, start, end }) => {\n    moveEvent({\n      event,\n      resourceId,\n      start,\n      end\n    });\n  };\n\n  const handleSelect = ({ start }) => {\n    toggleIsOpen();\n    handleStartTimeChange(start);\n  };\n\n  const addEvent = newEvent => {\n    setEvents([...events, newEvent]);\n  };\n\n  const handleAddEvent = newEvent => {\n    addEvent(newEvent);\n    toggleIsOpen();\n  };\n\n  return (\n    <div>\n      {isOpen && (\n        <EventForm\n          isOpen={isOpen}\n          toggleIsOpen={toggleIsOpen}\n          addEvent={handleAddEvent}\n          addTeachingMins={addTeachingMins}\n          events={events}\n          teacherList={teacherList}\n          startTime={startTime}\n          handleStartTimeChange={handleStartTimeChange}\n          startTimeReset={startTimeReset}\n        />\n      )}\n      <DragAndDropCalendar\n        style={{ width: \"95vw\", maxHeight: \"100%\" }}\n        localizer={localizer}\n        views={{ week: WorkWeek, day: true }}\n        defaultView=\"day\"\n        events={events}\n        onEventDrop={handleUpdate}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        resources={teacherList}\n        resourceIdAccessor=\"resourceId\"\n        resourceTitleAccessor=\"resourceTitle\"\n        selectable\n        eventPropGetter={\n          // Hide a dummy event that fixes drag and drop bug\n          event => {\n            if (event.hide) {\n              return { style: { display: \"none\" } };\n            }\n          }\n        }\n        step={30}\n        timeslots={2}\n        min={minTime}\n        max={maxTime}\n        onSelectSlot={handleSelect}\n      />\n    </div>\n  );\n};\nexport default Schedule;\n"]},"metadata":{},"sourceType":"module"}