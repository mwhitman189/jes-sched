{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/frontend/src/components/EventForm.js\";\nimport React, { useEffect } from \"react\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const addEvent = props.addEvent,\n        formType = props.formType,\n        setFormType = props.setFormType,\n        events = props.events,\n        teachers = props.teachers,\n        startTime = props.startTime,\n        updateStartTime = props.updateStartTime,\n        selectedEvent = props.selectedEvent,\n        updateEvent = props.updateEvent,\n        setEvents = props.setEvents;\n  const startDateTime = startTime ? startTime : selectedEvent.start;\n\n  const _useInputState = useInputState(selectedEvent ? selectedEvent.title : \"\"),\n        _useInputState2 = _slicedToArray(_useInputState, 2),\n        title = _useInputState2[0],\n        updateTitle = _useInputState2[1];\n\n  const _useInputState3 = useInputState(selectedEvent ? selectedEvent.duration : \"\"),\n        _useInputState4 = _slicedToArray(_useInputState3, 2),\n        duration = _useInputState4[0],\n        updateDuration = _useInputState4[1];\n\n  const _useInputState5 = useInputState(selectedEvent ? selectedEvent.resourceId : \"\"),\n        _useInputState6 = _slicedToArray(_useInputState5, 2),\n        resource = _useInputState6[0],\n        updateResource = _useInputState6[1];\n\n  const _useInputState7 = useInputState(selectedEvent ? selectedEvent.room : \"\"),\n        _useInputState8 = _slicedToArray(_useInputState7, 2),\n        room = _useInputState8[0],\n        updateRoom = _useInputState8[1];\n\n  const _useInputState9 = useInputState(selectedEvent ? selectedEvent.type : \"\"),\n        _useInputState10 = _slicedToArray(_useInputState9, 2),\n        eventType = _useInputState10[0],\n        updateEventType = _useInputState10[1];\n\n  const _useInputState11 = useInputState(selectedEvent ? selectedEvent.updateGroupId : \"\"),\n        _useInputState12 = _slicedToArray(_useInputState11, 2),\n        groupId = _useInputState12[0],\n        updateGroupId = _useInputState12[1];\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n\n  if (!selectedEvent) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    }); // If an event does not exist, check whether the selected room is\n    // available at the specified time\n\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n\n  const hideForm = () => setFormType(\"\");\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      groupId: 3,\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    console.log(selectedEvent); // const startTimeObj = new Date(startDateTime);\n\n    updateEvent(events, selectedEvent, setEvents);\n    hideForm();\n  };\n\n  return React.createElement(Dialog, {\n    open: formType === \"event\",\n    onClose: hideForm,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: selectedEvent ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: updateTitle,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Start Time\",\n    type: \"text\",\n    value: startDateTime,\n    onChange: updateStartTime,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: updateDuration,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Teacher\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: updateResource,\n    name: \"resource\",\n    validators: teacherValidators,\n    errorMessages: teacherValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }), teachers.map(t => React.createElement(MenuItem, {\n    key: `teacher-${t.resourceId}`,\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    label: \"Room\",\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: updateRoom,\n    name: \"room\",\n    validators: roomValidators,\n    errorMessages: roomValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: `room-${r}`,\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, r)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Lesson Type\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"type\",\n    value: eventType,\n    onChange: updateEventType,\n    name: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }), lessonTypes.map(t => React.createElement(MenuItem, {\n    key: `type-${t.shortName}`,\n    value: t.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, t.name))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: hideForm,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/frontend/src/components/EventForm.js"],"names":["React","useEffect","ValidatorForm","TextValidator","SelectValidator","moment","useInputState","validateRoom","validateTeacher","makeStyles","MenuItem","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","roomList","lessonTypes","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","EventForm","props","classes","addEvent","formType","setFormType","events","teachers","startTime","updateStartTime","selectedEvent","updateEvent","setEvents","startDateTime","start","title","updateTitle","duration","updateDuration","resourceId","resource","updateResource","room","updateRoom","type","eventType","updateEventType","updateGroupId","groupId","teacherValidators","teacherValMsgs","roomValidators","roomValMsgs","push","addValidationRule","teacher","hideForm","handleAddEvent","e","preventDefault","startTimeObj","Date","end","add","toDate","parseInt","handleEditEvent","console","log","selectStyles","shrink","map","t","name","r","shortName"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator\n} from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\n\nimport useInputState from \"../hooks/useInputState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const {\n    addEvent,\n    formType,\n    setFormType,\n    events,\n    teachers,\n    startTime,\n    updateStartTime,\n    selectedEvent,\n    updateEvent,\n    setEvents\n  } = props;\n  const startDateTime = startTime ? startTime : selectedEvent.start;\n\n  const [title, updateTitle] = useInputState(\n    selectedEvent ? selectedEvent.title : \"\"\n  );\n  const [duration, updateDuration] = useInputState(\n    selectedEvent ? selectedEvent.duration : \"\"\n  );\n  const [resource, updateResource] = useInputState(\n    selectedEvent ? selectedEvent.resourceId : \"\"\n  );\n  const [room, updateRoom] = useInputState(\n    selectedEvent ? selectedEvent.room : \"\"\n  );\n  const [eventType, updateEventType] = useInputState(\n    selectedEvent ? selectedEvent.type : \"\"\n  );\n  const [groupId, updateGroupId] = useInputState(\n    selectedEvent ? selectedEvent.updateGroupId : \"\"\n  );\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n  if (!selectedEvent) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    });\n\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n\n  const hideForm = () => setFormType(\"\");\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      groupId: 3,\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    console.log(selectedEvent);\n    // const startTimeObj = new Date(startDateTime);\n    updateEvent(events, selectedEvent, setEvents);\n    hideForm();\n  };\n\n  return (\n    <Dialog\n      open={formType === \"event\"}\n      onClose={hideForm}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm\n        onSubmit={selectedEvent ? handleEditEvent : handleAddEvent}\n      >\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={updateTitle}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Start Time\"\n              type=\"text\"\n              value={startDateTime}\n              onChange={updateStartTime}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={updateDuration}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Teacher\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={updateResource}\n              name=\"resource\"\n              validators={teacherValidators}\n              errorMessages={teacherValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {teachers.map(t => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              label=\"Room\"\n              InputLabelProps={{ shrink: true }}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={updateRoom}\n              name=\"room\"\n              validators={roomValidators}\n              errorMessages={roomValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map(r => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Lesson Type\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"type\"\n              value={eventType}\n              onChange={updateEventType}\n              name=\"type\"\n            >\n              <MenuItem value=\"\" />\n              {lessonTypes.map(t => (\n                <MenuItem key={`type-${t.shortName}`} value={t.type}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={hideForm} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Add Lesson\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}