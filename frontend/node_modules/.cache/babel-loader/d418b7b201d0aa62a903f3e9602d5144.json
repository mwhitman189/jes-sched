{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/src/components/EventForm.js\";\nimport React, { useEffect } from \"react\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useFormState from \"../hooks/useFormState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport roomList from \"../rooms\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  selectStyles: {\n    marginTop: \"23px\"\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const addEvent = props.addEvent,\n        isOpen = props.isOpen,\n        toggleIsOpen = props.toggleIsOpen,\n        events = props.events,\n        teacherList = props.teacherList,\n        startTime = props.startTime,\n        handleStartTimeChange = props.handleStartTimeChange,\n        event = props.event,\n        editEvent = props.editEvent;\n  const startDateTime = startTime ? startTime : event.start;\n\n  const _useFormState = useFormState(event ? event.title : \"\"),\n        _useFormState2 = _slicedToArray(_useFormState, 3),\n        title = _useFormState2[0],\n        handleTitleChange = _useFormState2[1],\n        titleReset = _useFormState2[2];\n\n  const _useFormState3 = useFormState(event ? event.duration : \"\"),\n        _useFormState4 = _slicedToArray(_useFormState3, 3),\n        duration = _useFormState4[0],\n        handleDurationChange = _useFormState4[1],\n        durationReset = _useFormState4[2];\n\n  const _useFormState5 = useFormState(event ? event.resourceId : \"\"),\n        _useFormState6 = _slicedToArray(_useFormState5, 3),\n        resource = _useFormState6[0],\n        handleResourceChange = _useFormState6[1],\n        resourceReset = _useFormState6[2];\n\n  const _useFormState7 = useFormState(event ? event.room : \"\"),\n        _useFormState8 = _slicedToArray(_useFormState7, 3),\n        room = _useFormState8[0],\n        handleRoomChange = _useFormState8[1],\n        roomReset = _useFormState8[2];\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    }); // If an event does not exist, check whether the selected room is\n    // available at the specified time\n\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n  let teacherValidators = [{\n    val: \"required\",\n    msg: \"Teacher Required\"\n  }];\n  let roomValidators = [{\n    val: \"required\",\n    msg: \"Room Required\"\n  }];\n\n  if (!event) {\n    teacherValidators.push({\n      val: \"teacherIsAvailable\",\n      msg: \"Teacher unavailable\"\n    });\n    roomValidators.push({\n      val: \"roomIsAvailable\",\n      msg: \"Room unavailable\"\n    });\n  }\n\n  const handleAddEvent = () => {\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: \"\".concat(title, \" -- \").concat(room),\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  const handleEditEvent = () => {\n    const startTimeObj = new Date(startDateTime);\n    editEvent({\n      title: \"\".concat(title, \" -- \").concat(room),\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  return React.createElement(Dialog, {\n    open: isOpen,\n    onClose: toggleIsOpen,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: event ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: handleTitleChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Start Time\",\n    type: \"text\",\n    value: startDateTime,\n    onChange: handleStartTimeChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: handleDurationChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"resource\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Teacher\"), React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: handleResourceChange,\n    name: \"resource\",\n    validators: [teacherValidators[0].val, teacherValidators[1].val],\n    errorMessages: [teacherValidators[0].msg, teacherValidators[1].msg],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), teacherList.map(t => React.createElement(MenuItem, {\n    key: \"teacher-\".concat(t.resourceId),\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Room #\"), React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: handleRoomChange,\n    name: \"room\",\n    validators: [roomValidators[0].val, roomValidators[1].val],\n    errorMessages: [roomValidators[0].msg, roomValidators[1].msg],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: \"room-\".concat(r),\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, r))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggleIsOpen,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/src/components/EventForm.js"],"names":["React","useEffect","ValidatorForm","TextValidator","SelectValidator","moment","useFormState","validateRoom","validateTeacher","makeStyles","MenuItem","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","InputLabel","FormControl","roomList","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","selectStyles","EventForm","props","classes","addEvent","isOpen","toggleIsOpen","events","teacherList","startTime","handleStartTimeChange","event","editEvent","startDateTime","start","title","handleTitleChange","titleReset","duration","handleDurationChange","durationReset","resourceId","resource","handleResourceChange","resourceReset","room","handleRoomChange","roomReset","addValidationRule","teacher","teacherValidators","val","msg","roomValidators","push","handleAddEvent","startTimeObj","Date","end","add","toDate","parseInt","handleEditEvent","map","t","name","r"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator\n} from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\n\nimport useFormState from \"../hooks/useFormState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nimport roomList from \"../rooms\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  selectStyles: {\n    marginTop: \"23px\"\n  }\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const {\n    addEvent,\n    isOpen,\n    toggleIsOpen,\n    events,\n    teacherList,\n    startTime,\n    handleStartTimeChange,\n    event,\n    editEvent\n  } = props;\n  const startDateTime = startTime ? startTime : event.start;\n\n  const [title, handleTitleChange, titleReset] = useFormState(\n    event ? event.title : \"\"\n  );\n  const [duration, handleDurationChange, durationReset] = useFormState(\n    event ? event.duration : \"\"\n  );\n  const [resource, handleResourceChange, resourceReset] = useFormState(\n    event ? event.resourceId : \"\"\n  );\n  const [room, handleRoomChange, roomReset] = useFormState(\n    event ? event.room : \"\"\n  );\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    });\n\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n\n  let teacherValidators = [{ val: \"required\", msg: \"Teacher Required\" }];\n  let roomValidators = [{ val: \"required\", msg: \"Room Required\" }];\n  if (!event) {\n    teacherValidators.push({\n      val: \"teacherIsAvailable\",\n      msg: \"Teacher unavailable\"\n    });\n    roomValidators.push({ val: \"roomIsAvailable\", msg: \"Room unavailable\" });\n  }\n\n  const handleAddEvent = () => {\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: `${title} -- ${room}`,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  const handleEditEvent = () => {\n    const startTimeObj = new Date(startDateTime);\n    editEvent({\n      title: `${title} -- ${room}`,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={toggleIsOpen}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm onSubmit={event ? handleEditEvent : handleAddEvent}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={handleTitleChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Start Time\"\n              type=\"text\"\n              value={startDateTime}\n              onChange={handleStartTimeChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={handleDurationChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"resource\">Teacher</InputLabel>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={handleResourceChange}\n              name=\"resource\"\n              validators={[teacherValidators[0].val, teacherValidators[1].val]}\n              errorMessages={[\n                teacherValidators[0].msg,\n                teacherValidators[1].msg\n              ]}\n            >\n              <MenuItem value=\"\" />\n              {teacherList.map(t => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"room\">Room #</InputLabel>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={handleRoomChange}\n              name=\"room\"\n              validators={[roomValidators[0].val, roomValidators[1].val]}\n              errorMessages={[roomValidators[0].msg, roomValidators[1].msg]}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map(r => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleIsOpen} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Add Lesson\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}