{"ast":null,"code":"var _jsxFileName = \"/home/miles/webdev/jes-sched/frontend/src/components/CustomView.js\";\nimport React from \"react\";\nimport { Navigate } from \"react-big-calendar\";\nimport TimeGrid from \"react-big-calendar/lib/TimeGrid\";\nimport * as dates from \"date-arithmetic\";\nimport moment from \"moment\";\nmoment.locale(\"jp\", {\n  week: {\n    dow: 1\n  }\n});\nconst localizer = momentLocalizer(moment);\n\nconst WorkWeek = props => {\n  let date = props.date;\n  let range = WorkWeek.range(date);\n  return React.createElement(TimeGrid, Object.assign({}, props, {\n    range: range,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n};\n\nWorkWeek.range = date => {\n  var firstOfWeek = localizer.startOfWeek(); // Set start date to the current work week's Monday\n\n  let gotDate = date.getDate(); // Check the current date's day as integer from 0(Sun) to 6(Sat)\n\n  switch (date.getDay()) {\n    case 0:\n      date.setDate(gotDate + 1);\n      break;\n\n    case 1:\n      date.setDate(gotDate);\n      break;\n\n    case 2:\n      date.setDate(gotDate - 1);\n      break;\n\n    case 3:\n      date.setDate(gotDate - 2);\n      break;\n\n    case 4:\n      date.setDate(gotDate - 3);\n      break;\n\n    case 5:\n      date.setDate(gotDate - 4);\n      break;\n\n    case 6:\n      date.setDate(gotDate - 5);\n      break;\n\n    default:\n      break;\n  }\n\n  let start = date;\n  let end = dates.add(start, 5, \"day\");\n  let current = start;\n  let range = [];\n\n  while (dates.lte(current, end, \"day\")) {\n    range.push(current);\n    current = dates.add(current, 1, \"day\");\n  }\n\n  return range;\n}; // Set navigation button behavior\n\n\nWorkWeek.navigate = (date, action) => {\n  switch (action) {\n    case Navigate.PREVIOUS:\n      return dates.subtract(date, 7, \"day\");\n\n    case Navigate.NEXT:\n      return dates.add(date, 7, \"day\");\n\n    default:\n      return date;\n  }\n};\n\nWorkWeek.title = date => {\n  return `${date.toLocaleDateString()}`;\n};\n\nexport { WorkWeek };","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/frontend/src/components/CustomView.js"],"names":["React","Navigate","TimeGrid","dates","moment","locale","week","dow","localizer","momentLocalizer","WorkWeek","props","date","range","firstOfWeek","startOfWeek","gotDate","getDate","getDay","setDate","start","end","add","current","lte","push","navigate","action","PREVIOUS","subtract","NEXT","title","toLocaleDateString"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Navigate } from \"react-big-calendar\";\nimport TimeGrid from \"react-big-calendar/lib/TimeGrid\";\nimport * as dates from \"date-arithmetic\";\nimport moment from \"moment\";\n\nmoment.locale(\"jp\", {\n  week: {\n    dow: 1\n  }\n});\nconst localizer = momentLocalizer(moment);\n\nconst WorkWeek = props => {\n  let { date } = props;\n  let range = WorkWeek.range(date);\n\n  return <TimeGrid {...props} range={range} />;\n};\n\nWorkWeek.range = date => {\n  var firstOfWeek = localizer.startOfWeek();\n  // Set start date to the current work week's Monday\n  let gotDate = date.getDate();\n  // Check the current date's day as integer from 0(Sun) to 6(Sat)\n  switch (date.getDay()) {\n    case 0:\n      date.setDate(gotDate + 1);\n      break;\n\n    case 1:\n      date.setDate(gotDate);\n      break;\n\n    case 2:\n      date.setDate(gotDate - 1);\n      break;\n\n    case 3:\n      date.setDate(gotDate - 2);\n      break;\n\n    case 4:\n      date.setDate(gotDate - 3);\n      break;\n\n    case 5:\n      date.setDate(gotDate - 4);\n      break;\n\n    case 6:\n      date.setDate(gotDate - 5);\n      break;\n\n    default:\n      break;\n  }\n\n  let start = date;\n  let end = dates.add(start, 5, \"day\");\n  let current = start;\n  let range = [];\n\n  while (dates.lte(current, end, \"day\")) {\n    range.push(current);\n    current = dates.add(current, 1, \"day\");\n  }\n  return range;\n};\n\n// Set navigation button behavior\nWorkWeek.navigate = (date, action) => {\n  switch (action) {\n    case Navigate.PREVIOUS:\n      return dates.subtract(date, 7, \"day\");\n\n    case Navigate.NEXT:\n      return dates.add(date, 7, \"day\");\n\n    default:\n      return date;\n  }\n};\n\nWorkWeek.title = date => {\n  return `${date.toLocaleDateString()}`;\n};\n\nexport { WorkWeek };\n"]},"metadata":{},"sourceType":"module"}