{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/frontend/src/components/EventForm.js\";\nimport React, { useEffect } from \"react\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { changeEvent, deleteEvent } from \"../helperFunctions\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const addEvent = props.addEvent,\n        formType = props.formType,\n        setFormType = props.setFormType,\n        events = props.events,\n        teachers = props.teachers,\n        startTime = props.startTime,\n        updateStartTime = props.updateStartTime,\n        event = props.event,\n        setEvents = props.setEvents,\n        setSelectedEvent = props.setSelectedEvent,\n        selectedTeacher = props.selectedTeacher,\n        isRecurring = props.isRecurring,\n        toggleIsRecurring = props.toggleIsRecurring; // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n\n  const startDateTime = startTime ? startTime : event.start;\n\n  const _useInputState = useInputState(event ? event.title : \"\"),\n        _useInputState2 = _slicedToArray(_useInputState, 3),\n        title = _useInputState2[0],\n        updateTitle = _useInputState2[1],\n        resetTitle = _useInputState2[2];\n\n  const _useInputState3 = useInputState(event ? event.duration : \"\"),\n        _useInputState4 = _slicedToArray(_useInputState3, 3),\n        duration = _useInputState4[0],\n        updateDuration = _useInputState4[1],\n        resetDuration = _useInputState4[2];\n\n  const _useInputState5 = useInputState(event ? event.resourceId : selectedTeacher),\n        _useInputState6 = _slicedToArray(_useInputState5, 3),\n        resource = _useInputState6[0],\n        updateResource = _useInputState6[1],\n        resetResource = _useInputState6[2];\n\n  const _useInputState7 = useInputState(event ? event.room : \"\"),\n        _useInputState8 = _slicedToArray(_useInputState7, 3),\n        room = _useInputState8[0],\n        updateRoom = _useInputState8[1],\n        resetRoom = _useInputState8[2];\n\n  const _useInputState9 = useInputState(event ? event.type : \"\"),\n        _useInputState10 = _slicedToArray(_useInputState9, 3),\n        eventType = _useInputState10[0],\n        updateEventType = _useInputState10[1],\n        resetEventType = _useInputState10[2];\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    }); // If an event does not exist, check whether the selected room is\n    // available at the specified time\n\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n\n  const hideForm = () => setFormType(\"\");\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(selectedTeacher),\n      type: eventType,\n      recur: isRecurring\n    });\n    resetForm();\n    setSelectedEvent(\"\");\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    changeEvent(events, event, editedEvent, setEvents);\n    resetForm();\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(events, event, setEvents);\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  const handleCancel = () => {\n    resetForm();\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  return React.createElement(Dialog, {\n    open: formType === \"event\",\n    onClose: hideForm,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: event ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: isRecurring,\n      onChange: handleToggleRecurrence,\n      value: isRecurring,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }),\n    label: \"Weekly lesson\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: updateTitle,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Start Time\",\n    type: \"text\",\n    value: startDateTime,\n    onChange: updateStartTime,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: updateDuration,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Teacher\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: updateResource,\n    name: \"resource\",\n    validators: teacherValidators,\n    errorMessages: teacherValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), teachers.map(t => React.createElement(MenuItem, {\n    key: `teacher-${t.resourceId}`,\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    label: \"Room\",\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: updateRoom,\n    name: \"room\",\n    validators: roomValidators,\n    errorMessages: roomValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: `room-${r}`,\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, r)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Lesson Type\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"type\",\n    value: eventType,\n    onChange: updateEventType,\n    name: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }), lessonTypes.map(t => React.createElement(MenuItem, {\n    key: `type-${t.shortName}`,\n    value: t.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, t.name))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleDeleteEvent,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, \"Delete Lesson\"), React.createElement(Button, {\n    onClick: handleCancel,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, event ? \"Confirm Change\" : \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/frontend/src/components/EventForm.js"],"names":["React","useEffect","ValidatorForm","TextValidator","SelectValidator","moment","useInputState","validateRoom","validateTeacher","changeEvent","deleteEvent","makeStyles","MenuItem","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","Switch","roomList","lessonTypes","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","EventForm","props","classes","addEvent","formType","setFormType","events","teachers","startTime","updateStartTime","event","setEvents","setSelectedEvent","selectedTeacher","isRecurring","toggleIsRecurring","startDateTime","start","title","updateTitle","resetTitle","duration","updateDuration","resetDuration","resourceId","resource","updateResource","resetResource","room","updateRoom","resetRoom","type","eventType","updateEventType","resetEventType","teacherValidators","teacherValMsgs","roomValidators","roomValMsgs","push","addValidationRule","teacher","hideForm","resetForm","handleAddEvent","e","preventDefault","startTimeObj","Date","end","add","toDate","parseInt","recur","handleEditEvent","editedEvent","handleDeleteEvent","handleToggleRecurrence","handleCancel","selectStyles","shrink","map","t","name","r","shortName"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator\n} from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\n\nimport useInputState from \"../hooks/useInputState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { changeEvent, deleteEvent } from \"../helperFunctions\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const {\n    addEvent,\n    formType,\n    setFormType,\n    events,\n    teachers,\n    startTime,\n    updateStartTime,\n    event,\n    setEvents,\n    setSelectedEvent,\n    selectedTeacher,\n    isRecurring,\n    toggleIsRecurring\n  } = props;\n\n  // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n  const startDateTime = startTime ? startTime : event.start;\n\n  const [title, updateTitle, resetTitle] = useInputState(\n    event ? event.title : \"\"\n  );\n  const [duration, updateDuration, resetDuration] = useInputState(\n    event ? event.duration : \"\"\n  );\n  const [resource, updateResource, resetResource] = useInputState(\n    event ? event.resourceId : selectedTeacher\n  );\n  const [room, updateRoom, resetRoom] = useInputState(event ? event.room : \"\");\n  const [eventType, updateEventType, resetEventType] = useInputState(\n    event ? event.type : \"\"\n  );\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    });\n\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  });\n\n  const hideForm = () => setFormType(\"\");\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(selectedTeacher),\n      type: eventType,\n      recur: isRecurring\n    });\n    resetForm();\n    setSelectedEvent(\"\");\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    changeEvent(events, event, editedEvent, setEvents);\n    resetForm();\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(events, event, setEvents);\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  const handleCancel = () => {\n    resetForm();\n    setSelectedEvent(\"\");\n    hideForm();\n  };\n\n  return (\n    <Dialog\n      open={formType === \"event\"}\n      onClose={hideForm}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm onSubmit={event ? handleEditEvent : handleAddEvent}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isRecurring}\n                onChange={handleToggleRecurrence}\n                value={isRecurring}\n              />\n            }\n            label=\"Weekly lesson\"\n          />\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={updateTitle}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Start Time\"\n              type=\"text\"\n              value={startDateTime}\n              onChange={updateStartTime}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={updateDuration}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Teacher\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={updateResource}\n              name=\"resource\"\n              validators={teacherValidators}\n              errorMessages={teacherValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {teachers.map(t => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              label=\"Room\"\n              InputLabelProps={{ shrink: true }}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={updateRoom}\n              name=\"room\"\n              validators={roomValidators}\n              errorMessages={roomValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map(r => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Lesson Type\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"type\"\n              value={eventType}\n              onChange={updateEventType}\n              name=\"type\"\n            >\n              <MenuItem value=\"\" />\n              {lessonTypes.map(t => (\n                <MenuItem key={`type-${t.shortName}`} value={t.type}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteEvent} color=\"secondary\">\n            Delete Lesson\n          </Button>\n          <Button onClick={handleCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            {event ? \"Confirm Change\" : \"Add Lesson\"}\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}