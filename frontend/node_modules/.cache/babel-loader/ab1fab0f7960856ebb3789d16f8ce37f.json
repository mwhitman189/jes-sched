{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/src/components/EventForm.js\";\nimport React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport useFormState from \"../hooks/useFormState\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport roomList from \"../rooms\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n\n  const _useFormState = useFormState(\"\"),\n        _useFormState2 = _slicedToArray(_useFormState, 3),\n        title = _useFormState2[0],\n        handleTitleChange = _useFormState2[1],\n        titleReset = _useFormState2[2];\n\n  const _useFormState3 = useFormState(\"\"),\n        _useFormState4 = _slicedToArray(_useFormState3, 3),\n        duration = _useFormState4[0],\n        handleDurationChange = _useFormState4[1],\n        durationReset = _useFormState4[2];\n\n  const _useFormState5 = useFormState(\"\"),\n        _useFormState6 = _slicedToArray(_useFormState5, 3),\n        resource = _useFormState6[0],\n        handleResourceChange = _useFormState6[1],\n        resourceReset = _useFormState6[2];\n\n  const _useFormState7 = useFormState(\"\"),\n        _useFormState8 = _slicedToArray(_useFormState7, 3),\n        room = _useFormState8[0],\n        handleRoomChange = _useFormState8[1],\n        roomReset = _useFormState8[2];\n\n  const addEvent = props.addEvent,\n        isOpen = props.isOpen,\n        toggleIsOpen = props.toggleIsOpen,\n        events = props.events,\n        teacherList = props.teacherList,\n        startTime = props.startTime,\n        handleStartTimeChange = props.handleStartTimeChange,\n        startTimeReset = props.startTimeReset;\n  useEffect(() => {\n    // Check whether the selected room is available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      events.forEach(event => {\n        console.log(event.start.valueOf(), event.end.valueOf(), moment(new Date(startTime)).valueOf(), moment(moment(new Date(startTime)).add(duration, \"m\").toDate()).valueOf());\n\n        if (testDateOverlap([event.start, event.end], [new Date(startTime), moment(new Date(startTime)).add(duration, \"m\").toDate()])) {\n          console.log(\"overlap\");\n          return event.room !== room;\n        }\n      });\n      return true;\n    });\n  });\n  useEffect(() => {\n    durationReset();\n    titleReset();\n    resourceReset();\n    roomReset();\n    startTimeReset();\n  }, [events]);\n\n  const testDateOverlap = (dateArr, testDateArr) => {\n    if (!testDateArr[0].isBetween(dateArr[0], dateArr[1]) && !testDateArr[1].isBetween(dateArr[0], dateArr[1])) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const test = () => {\n    events.forEach(event => {\n      if (!testDateOverlap([event.start, event.end], [moment(new Date(startTime)), moment(moment(new Date(startTime)).add(duration, \"m\").toDate())])) {\n        console.log(\"overlap\");\n        console.log(event.room !== room);\n        return event.room !== room;\n      }\n    });\n    return true;\n  };\n\n  const handleAddEvent = () => {\n    const startTimeObj = new Date(startTime);\n    addEvent({\n      title: \"\".concat(title, \" -- \").concat(room),\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  return React.createElement(Dialog, {\n    open: isOpen,\n    onClose: toggleIsOpen,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: handleTitleChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Start Time\",\n    type: \"text\",\n    value: startTime,\n    onChange: handleStartTimeChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: handleDurationChange,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"resource\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Teacher\"), React.createElement(Select, {\n    native: true,\n    id: \"resource\",\n    value: resource,\n    onChange: handleResourceChange,\n    name: \"resource\" // validators={[\"required\"]}\n    // errorMessages={[\"Select a Teacher\"]}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), teacherList.map(t => React.createElement(\"option\", {\n    key: \"teacher-\".concat(t.resourceId),\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Room #\"), React.createElement(Select, {\n    native: true,\n    id: \"room\",\n    value: room,\n    onChange: handleRoomChange,\n    name: \"room\" // validators={[\"required\", \"roomIsAvailable\"]}\n    // errorMessages={[\"Select a Room\", \"That name is already taken\"]}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(\"option\", {\n    key: \"room-\".concat(r),\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, r))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggleIsOpen,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"Add Class\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/src/components/EventForm.js"],"names":["React","useEffect","moment","useFormState","makeStyles","ValidatorForm","TextValidator","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","InputLabel","FormControl","Select","roomList","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","EventForm","props","classes","title","handleTitleChange","titleReset","duration","handleDurationChange","durationReset","resource","handleResourceChange","resourceReset","room","handleRoomChange","roomReset","addEvent","isOpen","toggleIsOpen","events","teacherList","startTime","handleStartTimeChange","startTimeReset","addValidationRule","forEach","event","console","log","start","valueOf","end","Date","add","toDate","testDateOverlap","dateArr","testDateArr","isBetween","test","handleAddEvent","startTimeObj","resourceId","parseInt","map","t","name","r"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport useFormState from \"../hooks/useFormState\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport roomList from \"../rooms\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n\n  const [title, handleTitleChange, titleReset] = useFormState(\"\");\n  const [duration, handleDurationChange, durationReset] = useFormState(\"\");\n  const [resource, handleResourceChange, resourceReset] = useFormState(\"\");\n  const [room, handleRoomChange, roomReset] = useFormState(\"\");\n\n  const {\n    addEvent,\n    isOpen,\n    toggleIsOpen,\n    events,\n    teacherList,\n    startTime,\n    handleStartTimeChange,\n    startTimeReset\n  } = props;\n\n  useEffect(() => {\n    // Check whether the selected room is available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      events.forEach(event => {\n        console.log(\n          event.start.valueOf(),\n          event.end.valueOf(),\n          moment(new Date(startTime)).valueOf(),\n          moment(\n            moment(new Date(startTime))\n              .add(duration, \"m\")\n              .toDate()\n          ).valueOf()\n        );\n        if (\n          testDateOverlap(\n            [event.start, event.end],\n            [\n              new Date(startTime),\n              moment(new Date(startTime))\n                .add(duration, \"m\")\n                .toDate()\n            ]\n          )\n        ) {\n          console.log(\"overlap\");\n          return event.room !== room;\n        }\n      });\n      return true;\n    });\n  });\n\n  useEffect(() => {\n    durationReset();\n    titleReset();\n    resourceReset();\n    roomReset();\n    startTimeReset();\n  }, [events]);\n\n  const testDateOverlap = (dateArr, testDateArr) => {\n    if (\n      !testDateArr[0].isBetween(dateArr[0], dateArr[1]) &&\n      !testDateArr[1].isBetween(dateArr[0], dateArr[1])\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const test = () => {\n    events.forEach(event => {\n      if (\n        !testDateOverlap(\n          [event.start, event.end],\n          [\n            moment(new Date(startTime)),\n            moment(\n              moment(new Date(startTime))\n                .add(duration, \"m\")\n                .toDate()\n            )\n          ]\n        )\n      ) {\n        console.log(\"overlap\");\n        console.log(event.room !== room);\n        return event.room !== room;\n      }\n    });\n    return true;\n  };\n\n  const handleAddEvent = () => {\n    const startTimeObj = new Date(startTime);\n    addEvent({\n      title: `${title} -- ${room}`,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource)\n    });\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={toggleIsOpen}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm onSubmit={test}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={handleTitleChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Start Time\"\n              type=\"text\"\n              value={startTime}\n              onChange={handleStartTimeChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={handleDurationChange}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"resource\">Teacher</InputLabel>\n            <Select\n              native\n              id=\"resource\"\n              value={resource}\n              onChange={handleResourceChange}\n              name=\"resource\"\n              // validators={[\"required\"]}\n              // errorMessages={[\"Select a Teacher\"]}\n            >\n              <option value=\"\" />\n              {teacherList.map(t => (\n                <option key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </option>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"room\">Room #</InputLabel>\n            <Select\n              native\n              id=\"room\"\n              value={room}\n              onChange={handleRoomChange}\n              name=\"room\"\n              // validators={[\"required\", \"roomIsAvailable\"]}\n              // errorMessages={[\"Select a Room\", \"That name is already taken\"]}\n            >\n              <option value=\"\" />\n              {roomList.map(r => (\n                <option key={`room-${r}`} value={r}>\n                  {r}\n                </option>\n              ))}\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleIsOpen} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Add Class\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}