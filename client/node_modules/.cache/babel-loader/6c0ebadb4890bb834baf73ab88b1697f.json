{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/client/src/components/EventForm.js\";\nimport React, { useEffect, useContext } from \"react\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggle from \"../hooks/useToggle\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport default function EventForm(props) {\n  const _useContext = useContext(EventsContext),\n        events = _useContext.events,\n        addEvent = _useContext.addEvent,\n        editEvent = _useContext.editEvent,\n        deleteEvent = _useContext.deleteEvent;\n\n  const classes = useStyles();\n  const formType = props.formType,\n        setFormType = props.setFormType,\n        teachers = props.teachers,\n        startTime = props.startTime,\n        updateStartTime = props.updateStartTime,\n        event = props.event,\n        setSelectedEvent = props.setSelectedEvent,\n        selectedTeacher = props.selectedTeacher,\n        validateRoomAndResource = props.validateRoomAndResource; // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n\n  const startDateTime = startTime ? startTime : event.start;\n\n  const _useInputState = useInputState(event ? event.title : \"\"),\n        _useInputState2 = _slicedToArray(_useInputState, 3),\n        title = _useInputState2[0],\n        updateTitle = _useInputState2[1],\n        resetTitle = _useInputState2[2];\n\n  const _useInputState3 = useInputState(event ? event.duration : \"\"),\n        _useInputState4 = _slicedToArray(_useInputState3, 3),\n        duration = _useInputState4[0],\n        updateDuration = _useInputState4[1],\n        resetDuration = _useInputState4[2];\n\n  const _useInputState5 = useInputState(event ? event.resourceId : selectedTeacher),\n        _useInputState6 = _slicedToArray(_useInputState5, 3),\n        resource = _useInputState6[0],\n        updateResource = _useInputState6[1],\n        resetResource = _useInputState6[2];\n\n  const _useInputState7 = useInputState(event ? event.room : \"\"),\n        _useInputState8 = _slicedToArray(_useInputState7, 3),\n        room = _useInputState8[0],\n        updateRoom = _useInputState8[1],\n        resetRoom = _useInputState8[2];\n\n  const _useInputState9 = useInputState(event ? event.type : \"\"),\n        _useInputState10 = _slicedToArray(_useInputState9, 3),\n        eventType = _useInputState10[0],\n        updateEventType = _useInputState10[1],\n        resetEventType = _useInputState10[2];\n\n  const _useToggle = useToggle(false),\n        _useToggle2 = _slicedToArray(_useToggle, 2),\n        isRecurring = _useToggle2[0],\n        toggleIsRecurring = _useToggle2[1];\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    validateResource();\n    validateRoom();\n  }, events);\n\n  const validateResource = () => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    });\n  };\n\n  const validateRoom = () => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  };\n\n  const handleUpdateResource = e => {\n    console.log(validateResource());\n    updateResource(e);\n  };\n\n  const handleUpdateRoom = e => {\n    updateRoom(e);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: resource,\n      type: eventType,\n      recur: isRecurring\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    validateRoomAndResource(e, resource, startTimeObj);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    editEvent(event, editedEvent);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(event);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  return React.createElement(Dialog, {\n    open: formType === \"event\",\n    onClose: hideForm,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: event ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: isRecurring,\n      onChange: handleToggleRecurrence,\n      value: isRecurring,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }),\n    label: \"Weekly lesson\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: updateTitle,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Start Time\",\n    type: \"text\",\n    value: startDateTime,\n    onChange: updateStartTime,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: updateDuration,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Teacher\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: handleUpdateResource,\n    name: \"resource\",\n    validators: teacherValidators,\n    errorMessages: teacherValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }), teachers.map(t => React.createElement(MenuItem, {\n    key: `teacher-${t.resourceId}`,\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    label: \"Room\",\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: handleUpdateRoom,\n    name: \"room\",\n    validators: roomValidators,\n    errorMessages: roomValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: `room-${r}`,\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, r)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Lesson Type\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"type\",\n    value: eventType,\n    onChange: updateEventType,\n    name: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }), lessonTypes.map(t => React.createElement(MenuItem, {\n    key: `type-${t.shortName}`,\n    value: t.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, t.name))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleDeleteEvent,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"Delete Lesson\"), React.createElement(Button, {\n    onClick: hideForm,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, event ? \"Confirm Change\" : \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/components/EventForm.js"],"names":["React","useEffect","useContext","ValidatorForm","TextValidator","SelectValidator","moment","useInputState","useToggle","validateRoom","validateTeacher","EventsContext","makeStyles","MenuItem","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","Switch","roomList","lessonTypes","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","EventForm","props","events","addEvent","editEvent","deleteEvent","classes","formType","setFormType","teachers","startTime","updateStartTime","event","setSelectedEvent","selectedTeacher","validateRoomAndResource","startDateTime","start","title","updateTitle","resetTitle","duration","updateDuration","resetDuration","resourceId","resource","updateResource","resetResource","room","updateRoom","resetRoom","type","eventType","updateEventType","resetEventType","isRecurring","toggleIsRecurring","teacherValidators","teacherValMsgs","roomValidators","roomValMsgs","push","validateResource","addValidationRule","teacher","handleUpdateResource","e","console","log","handleUpdateRoom","hideForm","resetForm","handleAddEvent","preventDefault","startTimeObj","Date","end","add","toDate","parseInt","recur","handleEditEvent","editedEvent","handleDeleteEvent","handleToggleRecurrence","selectStyles","shrink","map","t","name","r","shortName"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator\n} from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggle from \"../hooks/useToggle\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function EventForm(props) {\n  const { events, addEvent, editEvent, deleteEvent } = useContext(\n    EventsContext\n  );\n  const classes = useStyles();\n  const {\n    formType,\n    setFormType,\n    teachers,\n    startTime,\n    updateStartTime,\n    event,\n    setSelectedEvent,\n    selectedTeacher,\n    validateRoomAndResource\n  } = props;\n\n  // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n  const startDateTime = startTime ? startTime : event.start;\n\n  const [title, updateTitle, resetTitle] = useInputState(\n    event ? event.title : \"\"\n  );\n  const [duration, updateDuration, resetDuration] = useInputState(\n    event ? event.duration : \"\"\n  );\n  const [resource, updateResource, resetResource] = useInputState(\n    event ? event.resourceId : selectedTeacher\n  );\n  const [room, updateRoom, resetRoom] = useInputState(event ? event.room : \"\");\n  const [eventType, updateEventType, resetEventType] = useInputState(\n    event ? event.type : \"\"\n  );\n  const [isRecurring, toggleIsRecurring] = useToggle(false);\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  useEffect(() => {\n    validateResource();\n    validateRoom();\n  }, events);\n\n  const validateResource = () => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n      return validateTeacher(events, teacher, startTime, duration);\n    });\n  };\n\n  const validateRoom = () => {\n    // If an event does not exist, check whether the selected room is\n    // available at the specified time\n    ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n      return validateRoom(events, room, startTime, duration);\n    });\n  };\n\n  const handleUpdateResource = e => {\n    console.log(validateResource());\n    updateResource(e);\n  };\n\n  const handleUpdateRoom = e => {\n    updateRoom(e);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: resource,\n      type: eventType,\n      recur: isRecurring\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(startDateTime);\n    validateRoomAndResource(e, resource, startTimeObj);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    editEvent(event, editedEvent);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(event);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  return (\n    <Dialog\n      open={formType === \"event\"}\n      onClose={hideForm}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm onSubmit={event ? handleEditEvent : handleAddEvent}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isRecurring}\n                onChange={handleToggleRecurrence}\n                value={isRecurring}\n              />\n            }\n            label=\"Weekly lesson\"\n          />\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={updateTitle}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Start Time\"\n              type=\"text\"\n              value={startDateTime}\n              onChange={updateStartTime}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={updateDuration}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Teacher\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={handleUpdateResource}\n              name=\"resource\"\n              validators={teacherValidators}\n              errorMessages={teacherValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {teachers.map(t => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              label=\"Room\"\n              InputLabelProps={{ shrink: true }}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={handleUpdateRoom}\n              name=\"room\"\n              validators={roomValidators}\n              errorMessages={roomValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map(r => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Lesson Type\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"type\"\n              value={eventType}\n              onChange={updateEventType}\n              name=\"type\"\n            >\n              <MenuItem value=\"\" />\n              {lessonTypes.map(t => (\n                <MenuItem key={`type-${t.shortName}`} value={t.type}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteEvent} color=\"secondary\">\n            Delete Lesson\n          </Button>\n          <Button onClick={hideForm} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            {event ? \"Confirm Change\" : \"Add Lesson\"}\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}