{"ast":null,"code":"import _objectSpread from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from \"axios\";\nimport { RRule } from \"rrule\";\nimport moment from \"moment\";\n\nconst JapaneseHolidays = require(\"japanese-holidays\");\n\nconst getRecurrences = event => {\n  const now = new Date(); // Create start and end dates for the current month to calc\n  // teaching minutes\n\n  const months_start = new Date(now.getFullYear(), now.getMonth(), 1);\n  const months_end = new Date(now.getFullYear(), now.getMonth() + 2, 0); // Create an array of DateTimes for the recurrence of events.\n\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start)\n  });\n  const twoMonthsRecurrences = rrule.between(months_start, months_end);\n  twoMonthsRecurrences.shift();\n  return twoMonthsRecurrences;\n};\n\nconst calcDutyHours = (dutyHours, start) => {\n  if (moment(start) < dutyHours.startTime) {\n    dutyHours.startTime = moment(start);\n  } // Add 9 hours to the DH start time to ensure 9 duty hours\n\n\n  dutyHours.endTime = moment(dutyHours.startTime).add(9, \"hours\");\n  return dutyHours;\n};\n\nconst calcOutsideDutyMins = (eventStart, eventEnd, duration, dutyHoursStart, dutyHoursEnd) => {\n  // Calculate difference in hours between the duty hours start time and the lesson start time\n  const startDiff = dutyHoursStart.diff(eventStart, \"minutes\");\n  const endDiff = dutyHoursStart.diff(eventEnd, \"minutes\"); // Calculate difference in hours between the duty hours end time and the lesson end time\n\n  const afterDhEndDiff = -dutyHoursEnd.diff(eventEnd, \"minutes\");\n  const afterDhStartDiff = -dutyHoursEnd.diff(eventStart, \"minutes\");\n  let outsideDutyMins;\n\n  if (startDiff <= 0 && afterDhEndDiff <= 0) {\n    outsideDutyMins = 0;\n    return {\n      teachingMins: duration,\n      outsideDutyMins: outsideDutyMins\n    };\n  } else if (startDiff > 0 && endDiff > 0 || afterDhEndDiff > 0 && afterDhStartDiff > 0) {\n    return {\n      teachingMins: 0,\n      outsideDutyMins: duration\n    };\n  } else if (startDiff > 0) {\n    const regularTeachingMins = duration - startDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: startDiff\n    };\n  } else {\n    const regularTeachingMins = duration - afterDhEndDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: afterDhEndDiff\n    };\n  }\n};\n\nconst createPayPeriodData = (events, teacher, monthStart, monthEnd) => {\n  // Creates an object of dates containing minutes worked, by work type\n  const datesData = {};\n  teacher.teachingMins = 0;\n  teacher.outsideDutyMins = 0;\n  teacher.holidayMins = 0;\n  teacher.overThresholdOneMins = 0;\n  teacher.overThresholdTwoMins = 0;\n  const monthEvents = events.filter(e => {\n    return moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\") && e.resourceId === teacher.resourceId;\n  });\n  const dutyHoursByDate = {};\n  monthEvents.forEach(e => {\n    const date = e.start.getDate(); // Set the base duty hours to noon to ensure at least 9 duty hours\n\n    const baseDutyHours = {\n      startTime: moment(e.start).set({\n        hour: 12\n      }, {\n        minutes: 0\n      }),\n      endTime: moment(e.start).set({\n        hour: 12\n      }, {\n        minutes: 0\n      })\n    }; // Set the duty hours for the event's date\n\n    dutyHoursByDate[date] = calcDutyHours(baseDutyHours, e.start); // Set the duty hours for the event's date\n\n    dutyHoursByDate[date] = calcDutyHours(dutyHoursByDate[date], e.start);\n    console.log(moment(baseDutyHours.startTime).set({\n      hour: 12\n    }, {\n      minutes: 0\n    }));\n  });\n  monthEvents.forEach(e => {\n    if (moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\")) {\n      if (e.resourceId === teacher.resourceId) {\n        const date = e.start.getDate();\n        const day = e.start.getDay(); // Calculate number of minutes to add to first threshold to calc second threshold. (10 hours * 60 mins)\n\n        const secondThreshold = 10 * 60;\n        let teachingMins = 0;\n        let outsideDutyMins = 0;\n        let holidayMins = 0; // If event falls on a national holiday, add the class duration to holiday minutes,\n        // otherwise, add to total teaching minutes\n\n        if (JapaneseHolidays.isHoliday(e.start) || e.start.getDay() === (0 || 1)) {\n          holidayMins = e.duration;\n          teacher.holidayMins += holidayMins;\n        } else {\n          const totalTeachingMins = calcOutsideDutyMins(e.start, e.end, e.duration, dutyHoursByDate[date].startTime, dutyHoursByDate[date].endTime); // Add total teaching minutes and outside duty minutes to teacher object\n\n          teachingMins = totalTeachingMins.teachingMins;\n          teacher.teachingMins += teachingMins;\n          outsideDutyMins = totalTeachingMins.outsideDutyMins;\n          teacher.outsideDutyMins += outsideDutyMins;\n        } // Calculate hours worked over monthly thresholds one and two\n\n\n        if (teacher.teachingMins >= teacher.otThreshold + secondThreshold) {\n          teacher.overThresholdTwoMins += teacher.teachingMins - (teacher.otThreshold + secondThreshold);\n          teacher.overThresholdOneMins += secondThreshold;\n        } else if (teacher.teachingMins >= teacher.otThreshold) {\n          teacher.overThresholdOneMins += teacher.teachingMins - teacher.otThreshold;\n        } // Teaching minutes object to be added to hash table\n\n\n        const dateData = {\n          resourceId: teacher,\n          date: date,\n          day: day,\n          teachingMins: teachingMins,\n          outsideDutyMins: outsideDutyMins,\n          overThresholdOneMins: teacher.overThresholdOneMins,\n          overThresholdTwoMins: teacher.overThresholdTwoMins,\n          holidayMins: holidayMins,\n          travelAllowance: 0,\n          travelExpenses: 0\n        }; // If date already in hash table, add teaching minutes to existing keys, otherwise create\n        // a new date object\n\n        if (datesData[date]) {\n          datesData[date].teachingMins += dateData.teachingMins;\n          datesData[date].outsideDutyMins += dateData.outsideDutyMins;\n          datesData[date].overThresholdOneMins += dateData.overThresholdOneMins;\n          datesData[date].overThresholdTwoMins += dateData.overThresholdTwoMins;\n          datesData[date].holidayMins += dateData.holidayMins;\n          datesData[date].travelAllowance += dateData.travelAllowance;\n          datesData[date].travelExpenses += dateData.travelExpenses;\n        } else {\n          datesData[date] = dateData;\n        }\n      }\n    }\n  });\n  return datesData;\n};\n\nconst addNewEvent = event => {\n  const newEvents = [];\n\n  if (event.recur === true) {\n    const recurrences = getRecurrences(event);\n    recurrences.map(r => {\n      const newEvent = _objectSpread({}, event, {\n        start: r,\n        end: moment(r).add(event.duration, \"m\").toDate(),\n        isNewEvent: false,\n        isLast: false\n      });\n\n      if (JapaneseHolidays.isHoliday(r)) {\n        newEvent.isHoliday = true;\n      }\n\n      newEvents.push(newEvent);\n    });\n    newEvents[newEvents.length - 1].isLast = true;\n  }\n\n  if (JapaneseHolidays.isHoliday(event.start)) {\n    event = _objectSpread({}, event, {\n      isHoliday: true\n    });\n  }\n\n  event = _objectSpread({}, event, {\n    isNewEvent: true\n  });\n  newEvents.unshift(event);\n  return newEvents;\n};\n\nconst addPayment = async newPayment => {\n  return await axios.post(`/payments/add`, newPayment).then(res => console.log(res.data)).catch(err => console.log(err));\n};\n\nexport { getRecurrences, addNewEvent, addPayment, createPayPeriodData };","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/helperFunctions.js"],"names":["axios","RRule","moment","JapaneseHolidays","require","getRecurrences","event","now","Date","months_start","getFullYear","getMonth","months_end","rrule","freq","WEEKLY","count","interval","dtstart","start","twoMonthsRecurrences","between","shift","calcDutyHours","dutyHours","startTime","endTime","add","calcOutsideDutyMins","eventStart","eventEnd","duration","dutyHoursStart","dutyHoursEnd","startDiff","diff","endDiff","afterDhEndDiff","afterDhStartDiff","outsideDutyMins","teachingMins","regularTeachingMins","createPayPeriodData","events","teacher","monthStart","monthEnd","datesData","holidayMins","overThresholdOneMins","overThresholdTwoMins","monthEvents","filter","e","isBetween","resourceId","dutyHoursByDate","forEach","date","getDate","baseDutyHours","set","hour","minutes","console","log","day","getDay","secondThreshold","isHoliday","totalTeachingMins","end","otThreshold","dateData","travelAllowance","travelExpenses","addNewEvent","newEvents","recur","recurrences","map","r","newEvent","toDate","isNewEvent","isLast","push","length","unshift","addPayment","newPayment","post","then","res","data","catch","err"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { RRule } from \"rrule\";\nimport moment from \"moment\";\n\nconst JapaneseHolidays = require(\"japanese-holidays\");\n\nconst getRecurrences = event => {\n  const now = new Date();\n  // Create start and end dates for the current month to calc\n  // teaching minutes\n  const months_start = new Date(now.getFullYear(), now.getMonth(), 1);\n  const months_end = new Date(now.getFullYear(), now.getMonth() + 2, 0);\n  // Create an array of DateTimes for the recurrence of events.\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start)\n  });\n  const twoMonthsRecurrences = rrule.between(months_start, months_end);\n  twoMonthsRecurrences.shift();\n  return twoMonthsRecurrences;\n};\n\nconst calcDutyHours = (dutyHours, start) => {\n  if (moment(start) < dutyHours.startTime) {\n    dutyHours.startTime = moment(start);\n  }\n\n  // Add 9 hours to the DH start time to ensure 9 duty hours\n  dutyHours.endTime = moment(dutyHours.startTime).add(9, \"hours\");\n  return dutyHours;\n};\n\nconst calcOutsideDutyMins = (\n  eventStart,\n  eventEnd,\n  duration,\n  dutyHoursStart,\n  dutyHoursEnd\n) => {\n  // Calculate difference in hours between the duty hours start time and the lesson start time\n  const startDiff = dutyHoursStart.diff(eventStart, \"minutes\");\n  const endDiff = dutyHoursStart.diff(eventEnd, \"minutes\");\n\n  // Calculate difference in hours between the duty hours end time and the lesson end time\n  const afterDhEndDiff = -dutyHoursEnd.diff(eventEnd, \"minutes\");\n  const afterDhStartDiff = -dutyHoursEnd.diff(eventStart, \"minutes\");\n\n  let outsideDutyMins;\n  if (startDiff <= 0 && afterDhEndDiff <= 0) {\n    outsideDutyMins = 0;\n    return {\n      teachingMins: duration,\n      outsideDutyMins: outsideDutyMins\n    };\n  } else if (\n    (startDiff > 0 && endDiff > 0) ||\n    (afterDhEndDiff > 0 && afterDhStartDiff > 0)\n  ) {\n    return {\n      teachingMins: 0,\n      outsideDutyMins: duration\n    };\n  } else if (startDiff > 0) {\n    const regularTeachingMins = duration - startDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: startDiff\n    };\n  } else {\n    const regularTeachingMins = duration - afterDhEndDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: afterDhEndDiff\n    };\n  }\n};\n\nconst createPayPeriodData = (events, teacher, monthStart, monthEnd) => {\n  // Creates an object of dates containing minutes worked, by work type\n  const datesData = {};\n  teacher.teachingMins = 0;\n  teacher.outsideDutyMins = 0;\n  teacher.holidayMins = 0;\n  teacher.overThresholdOneMins = 0;\n  teacher.overThresholdTwoMins = 0;\n\n  const monthEvents = events.filter(e => {\n    return (\n      moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\") &&\n      e.resourceId === teacher.resourceId\n    );\n  });\n\n  const dutyHoursByDate = {};\n\n  monthEvents.forEach(e => {\n    const date = e.start.getDate();\n    // Set the base duty hours to noon to ensure at least 9 duty hours\n    const baseDutyHours = {\n      startTime: moment(e.start).set({ hour: 12 }, { minutes: 0 }),\n      endTime: moment(e.start).set({ hour: 12 }, { minutes: 0 })\n    };\n\n    // Set the duty hours for the event's date\n    dutyHoursByDate[date] = calcDutyHours(baseDutyHours, e.start);\n    // Set the duty hours for the event's date\n    dutyHoursByDate[date] = calcDutyHours(dutyHoursByDate[date], e.start);\n    console.log(\n      moment(baseDutyHours.startTime).set({ hour: 12 }, { minutes: 0 })\n    );\n  });\n\n  monthEvents.forEach(e => {\n    if (moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\")) {\n      if (e.resourceId === teacher.resourceId) {\n        const date = e.start.getDate();\n        const day = e.start.getDay();\n        // Calculate number of minutes to add to first threshold to calc second threshold. (10 hours * 60 mins)\n        const secondThreshold = 10 * 60;\n        let teachingMins = 0;\n        let outsideDutyMins = 0;\n        let holidayMins = 0;\n\n        // If event falls on a national holiday, add the class duration to holiday minutes,\n        // otherwise, add to total teaching minutes\n        if (\n          JapaneseHolidays.isHoliday(e.start) ||\n          e.start.getDay() === (0 || 1)\n        ) {\n          holidayMins = e.duration;\n          teacher.holidayMins += holidayMins;\n        } else {\n          const totalTeachingMins = calcOutsideDutyMins(\n            e.start,\n            e.end,\n            e.duration,\n            dutyHoursByDate[date].startTime,\n            dutyHoursByDate[date].endTime\n          );\n\n          // Add total teaching minutes and outside duty minutes to teacher object\n          teachingMins = totalTeachingMins.teachingMins;\n          teacher.teachingMins += teachingMins;\n          outsideDutyMins = totalTeachingMins.outsideDutyMins;\n          teacher.outsideDutyMins += outsideDutyMins;\n        }\n        // Calculate hours worked over monthly thresholds one and two\n        if (teacher.teachingMins >= teacher.otThreshold + secondThreshold) {\n          teacher.overThresholdTwoMins +=\n            teacher.teachingMins - (teacher.otThreshold + secondThreshold);\n          teacher.overThresholdOneMins += secondThreshold;\n        } else if (teacher.teachingMins >= teacher.otThreshold) {\n          teacher.overThresholdOneMins +=\n            teacher.teachingMins - teacher.otThreshold;\n        }\n        // Teaching minutes object to be added to hash table\n        const dateData = {\n          resourceId: teacher,\n          date: date,\n          day: day,\n          teachingMins: teachingMins,\n          outsideDutyMins: outsideDutyMins,\n          overThresholdOneMins: teacher.overThresholdOneMins,\n          overThresholdTwoMins: teacher.overThresholdTwoMins,\n          holidayMins: holidayMins,\n          travelAllowance: 0,\n          travelExpenses: 0\n        };\n        // If date already in hash table, add teaching minutes to existing keys, otherwise create\n        // a new date object\n        if (datesData[date]) {\n          datesData[date].teachingMins += dateData.teachingMins;\n          datesData[date].outsideDutyMins += dateData.outsideDutyMins;\n          datesData[date].overThresholdOneMins += dateData.overThresholdOneMins;\n          datesData[date].overThresholdTwoMins += dateData.overThresholdTwoMins;\n          datesData[date].holidayMins += dateData.holidayMins;\n          datesData[date].travelAllowance += dateData.travelAllowance;\n          datesData[date].travelExpenses += dateData.travelExpenses;\n        } else {\n          datesData[date] = dateData;\n        }\n      }\n    }\n  });\n  return datesData;\n};\n\nconst addNewEvent = event => {\n  const newEvents = [];\n  if (event.recur === true) {\n    const recurrences = getRecurrences(event);\n    recurrences.map(r => {\n      const newEvent = {\n        ...event,\n        start: r,\n        end: moment(r)\n          .add(event.duration, \"m\")\n          .toDate(),\n        isNewEvent: false,\n        isLast: false\n      };\n      if (JapaneseHolidays.isHoliday(r)) {\n        newEvent.isHoliday = true;\n      }\n      newEvents.push(newEvent);\n    });\n    newEvents[newEvents.length - 1].isLast = true;\n  }\n  if (JapaneseHolidays.isHoliday(event.start)) {\n    event = { ...event, isHoliday: true };\n  }\n  event = { ...event, isNewEvent: true };\n  newEvents.unshift(event);\n\n  return newEvents;\n};\n\nconst addPayment = async newPayment => {\n  return await axios\n    .post(`/payments/add`, newPayment)\n    .then(res => console.log(res.data))\n    .catch(err => console.log(err));\n};\n\nexport { getRecurrences, addNewEvent, addPayment, createPayPeriodData };\n"]},"metadata":{},"sourceType":"module"}