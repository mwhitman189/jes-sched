{"ast":null,"code":"// import { useState } from \"react\";\n// import axios from \"axios\";\n// import { createPayPeriodData } from \"../helperFunctions\";\n// export default initialTeachers => {\n//   const [teachers, setTeachers] = useState(initialTeachers);\n//   const updateTeacher = async teacher => {\n//     const idx = teachers.findIndex(t => t._id === teacher._id);\n//     const updatedTeachers = [...teachers];\n//     const updatedTeacher = {\n//       ...teacher,\n//       resourceTitle: teacher.resourceTitle,\n//       name: teacher.name,\n//       familyName: teacher.familyName,\n//       teachingMins: teacher.teachingMins,\n//       holidayMins: teacher.holidayMins,\n//       outsideDutyMins: teacher.outsideDutyMins,\n//       otThreshold: teacher.otThreshold,\n//       overThresholdOneMins: teacher.overThresholdOneMins,\n//       overThresholdTwoMins: teacher.overThresholdTwoMins\n//     };\n//     updatedTeachers.splice(idx, 1, updatedTeacher);\n//     setTeachers(updatedTeachers);\n//     await axios\n//       .put(`/teachers/update/${teacher._id}`, updatedTeacher)\n//       .then(res => console.log(res.data))\n//       .catch(err => console.log(err));\n//   };\n//   return {\n//     teachers,\n//     getTeachers: async () => {\n//       await axios\n//         .get(\"/teachers/\")\n//         .then(res => {\n//           if (res.data.length > 0) {\n//             setTeachers(res.data);\n//           }\n//         })\n//         .catch(err => console.log(err));\n//     },\n//     addTeacher: async newTeacher => {\n//       await axios\n//         .post(\"/teachers/add\", newTeacher)\n//         .then(res => console.log(res.data))\n//         .catch(err => console.log(err));\n//       return setTeachers([...teachers, newTeacher]);\n//     },\n//     deleteTeacher: async teacher => {\n//       await axios\n//         .delete(`/teachers/delete/${teacher._id}`)\n//         .then(res => console.log(res.data))\n//         .catch(err => console.log(err));\n//     },\n//     addTeachingMins: events => {\n//       const now = new Date();\n//       // Create start and end dates for the current month to calc\n//       // teaching minutes\n//       const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n//       const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n//       if (teachers.length > 0) {\n//         // Reset teaching minutes to \"0\", then add all teaching minutes to the corresponding instructor\n//         teachers.forEach(teacher => {\n//           teacher.teachingMins = 0;\n//           teacher.outsideDutyMins = 0;\n//           teacher.holidayMins = 0;\n//           teacher.overThresholdOneMins = 0;\n//           teacher.overThresholdTwoMins = 0;\n//         });\n//         teachers.forEach(teacher => {\n//           createPayPeriodData(events, teacher, monthStart, monthEnd);\n//           updateTeacher(teacher);\n//         });\n//       }\n//     }\n//   };\n// };","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/hooks/useTeachersState.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useState } from \"react\";\n// import axios from \"axios\";\n// import { createPayPeriodData } from \"../helperFunctions\";\n\n// export default initialTeachers => {\n//   const [teachers, setTeachers] = useState(initialTeachers);\n\n//   const updateTeacher = async teacher => {\n//     const idx = teachers.findIndex(t => t._id === teacher._id);\n//     const updatedTeachers = [...teachers];\n\n//     const updatedTeacher = {\n//       ...teacher,\n//       resourceTitle: teacher.resourceTitle,\n//       name: teacher.name,\n//       familyName: teacher.familyName,\n//       teachingMins: teacher.teachingMins,\n//       holidayMins: teacher.holidayMins,\n//       outsideDutyMins: teacher.outsideDutyMins,\n//       otThreshold: teacher.otThreshold,\n//       overThresholdOneMins: teacher.overThresholdOneMins,\n//       overThresholdTwoMins: teacher.overThresholdTwoMins\n//     };\n//     updatedTeachers.splice(idx, 1, updatedTeacher);\n\n//     setTeachers(updatedTeachers);\n//     await axios\n//       .put(`/teachers/update/${teacher._id}`, updatedTeacher)\n//       .then(res => console.log(res.data))\n//       .catch(err => console.log(err));\n//   };\n\n//   return {\n//     teachers,\n//     getTeachers: async () => {\n//       await axios\n//         .get(\"/teachers/\")\n//         .then(res => {\n//           if (res.data.length > 0) {\n//             setTeachers(res.data);\n//           }\n//         })\n//         .catch(err => console.log(err));\n//     },\n//     addTeacher: async newTeacher => {\n//       await axios\n//         .post(\"/teachers/add\", newTeacher)\n//         .then(res => console.log(res.data))\n//         .catch(err => console.log(err));\n//       return setTeachers([...teachers, newTeacher]);\n//     },\n//     deleteTeacher: async teacher => {\n//       await axios\n//         .delete(`/teachers/delete/${teacher._id}`)\n//         .then(res => console.log(res.data))\n//         .catch(err => console.log(err));\n//     },\n//     addTeachingMins: events => {\n//       const now = new Date();\n//       // Create start and end dates for the current month to calc\n//       // teaching minutes\n//       const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n//       const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n//       if (teachers.length > 0) {\n//         // Reset teaching minutes to \"0\", then add all teaching minutes to the corresponding instructor\n//         teachers.forEach(teacher => {\n//           teacher.teachingMins = 0;\n//           teacher.outsideDutyMins = 0;\n//           teacher.holidayMins = 0;\n//           teacher.overThresholdOneMins = 0;\n//           teacher.overThresholdTwoMins = 0;\n//         });\n\n//         teachers.forEach(teacher => {\n//           createPayPeriodData(events, teacher, monthStart, monthEnd);\n//           updateTeacher(teacher);\n//         });\n//       }\n//     }\n//   };\n// };\n"]},"metadata":{},"sourceType":"module"}