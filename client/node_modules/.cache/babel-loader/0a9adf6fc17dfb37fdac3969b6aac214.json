{"ast":null,"code":"import React from\"react\";import{Navigate}from\"react-big-calendar\";import TimeGrid from\"react-big-calendar/lib/TimeGrid\";import*as dates from\"date-arithmetic\";var WorkWeek=function WorkWeek(props){var date=props.date;var range=WorkWeek.range(date);return React.createElement(TimeGrid,Object.assign({},props,{range:range}));};WorkWeek.range=function(date){// Set the date object's time to 0:00 so all events for the day will be displayed\n// on the first day of the calendar week regardless of time of day\ndate.setHours(0,0,0,0);// Set start date to the current work week's Monday\nvar gotDate=date.getDate();// Check the current date's day as integer from 0(Sun) to 6(Sat)\nswitch(date.getDay()){case 0:date.setDate(gotDate+1);break;case 1:date.setDate(gotDate);break;case 2:date.setDate(gotDate-1);break;case 3:date.setDate(gotDate-2);break;case 4:date.setDate(gotDate-3);break;case 5:date.setDate(gotDate-4);break;case 6:date.setDate(gotDate-5);break;default:break;}var start=date;var end=dates.add(start,5,\"day\");var current=start;var range=[];while(dates.lte(current,end,\"day\")){range.push(current);current=dates.add(current,1,\"day\");}return range;};// Set navigation button behavior\nWorkWeek.navigate=function(date,action){switch(action){case Navigate.PREVIOUS:return dates.subtract(date,7,\"day\");case Navigate.NEXT:return dates.add(date,7,\"day\");default:return date;}};WorkWeek.title=function(date){return\"\".concat(date.toLocaleDateString());};export{WorkWeek};","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/components/CustomView.js"],"names":["React","Navigate","TimeGrid","dates","WorkWeek","props","date","range","setHours","gotDate","getDate","getDay","setDate","start","end","add","current","lte","push","navigate","action","PREVIOUS","subtract","NEXT","title","toLocaleDateString"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,oBAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iCAArB,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,iBAAvB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,IAClBC,CAAAA,IADkB,CACTD,KADS,CAClBC,IADkB,CAExB,GAAIC,CAAAA,KAAK,CAAGH,QAAQ,CAACG,KAAT,CAAeD,IAAf,CAAZ,CAEA,MAAO,qBAAC,QAAD,kBAAcD,KAAd,EAAqB,KAAK,CAAEE,KAA5B,GAAP,CACD,CALD,CAOAH,QAAQ,CAACG,KAAT,CAAiB,SAAAD,IAAI,CAAI,CACvB;AACA;AACAA,IAAI,CAACE,QAAL,CAAc,CAAd,CAAiB,CAAjB,CAAoB,CAApB,CAAuB,CAAvB,EACA;AACA,GAAIC,CAAAA,OAAO,CAAGH,IAAI,CAACI,OAAL,EAAd,CACA;AACA,OAAQJ,IAAI,CAACK,MAAL,EAAR,EACE,IAAK,EAAL,CACEL,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAb,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,IAAK,EAAL,CACEH,IAAI,CAACM,OAAL,CAAaH,OAAO,CAAG,CAAvB,EACA,MAEF,QACE,MA9BJ,CAiCA,GAAII,CAAAA,KAAK,CAAGP,IAAZ,CACA,GAAIQ,CAAAA,GAAG,CAAGX,KAAK,CAACY,GAAN,CAAUF,KAAV,CAAiB,CAAjB,CAAoB,KAApB,CAAV,CACA,GAAIG,CAAAA,OAAO,CAAGH,KAAd,CACA,GAAIN,CAAAA,KAAK,CAAG,EAAZ,CAEA,MAAOJ,KAAK,CAACc,GAAN,CAAUD,OAAV,CAAmBF,GAAnB,CAAwB,KAAxB,CAAP,CAAuC,CACrCP,KAAK,CAACW,IAAN,CAAWF,OAAX,EACAA,OAAO,CAAGb,KAAK,CAACY,GAAN,CAAUC,OAAV,CAAmB,CAAnB,CAAsB,KAAtB,CAAV,CACD,CACD,MAAOT,CAAAA,KAAP,CACD,CAlDD,CAoDA;AACAH,QAAQ,CAACe,QAAT,CAAoB,SAACb,IAAD,CAAOc,MAAP,CAAkB,CACpC,OAAQA,MAAR,EACE,IAAKnB,CAAAA,QAAQ,CAACoB,QAAd,CACE,MAAOlB,CAAAA,KAAK,CAACmB,QAAN,CAAehB,IAAf,CAAqB,CAArB,CAAwB,KAAxB,CAAP,CAEF,IAAKL,CAAAA,QAAQ,CAACsB,IAAd,CACE,MAAOpB,CAAAA,KAAK,CAACY,GAAN,CAAUT,IAAV,CAAgB,CAAhB,CAAmB,KAAnB,CAAP,CAEF,QACE,MAAOA,CAAAA,IAAP,CARJ,CAUD,CAXD,CAaAF,QAAQ,CAACoB,KAAT,CAAiB,SAAAlB,IAAI,CAAI,CACvB,gBAAUA,IAAI,CAACmB,kBAAL,EAAV,EACD,CAFD,CAIA,OAASrB,QAAT","sourcesContent":["import React from \"react\";\nimport { Navigate } from \"react-big-calendar\";\nimport TimeGrid from \"react-big-calendar/lib/TimeGrid\";\nimport * as dates from \"date-arithmetic\";\n\nconst WorkWeek = props => {\n  let { date } = props;\n  let range = WorkWeek.range(date);\n\n  return <TimeGrid {...props} range={range} />;\n};\n\nWorkWeek.range = date => {\n  // Set the date object's time to 0:00 so all events for the day will be displayed\n  // on the first day of the calendar week regardless of time of day\n  date.setHours(0, 0, 0, 0);\n  // Set start date to the current work week's Monday\n  let gotDate = date.getDate();\n  // Check the current date's day as integer from 0(Sun) to 6(Sat)\n  switch (date.getDay()) {\n    case 0:\n      date.setDate(gotDate + 1);\n      break;\n\n    case 1:\n      date.setDate(gotDate);\n      break;\n\n    case 2:\n      date.setDate(gotDate - 1);\n      break;\n\n    case 3:\n      date.setDate(gotDate - 2);\n      break;\n\n    case 4:\n      date.setDate(gotDate - 3);\n      break;\n\n    case 5:\n      date.setDate(gotDate - 4);\n      break;\n\n    case 6:\n      date.setDate(gotDate - 5);\n      break;\n\n    default:\n      break;\n  }\n\n  let start = date;\n  let end = dates.add(start, 5, \"day\");\n  let current = start;\n  let range = [];\n\n  while (dates.lte(current, end, \"day\")) {\n    range.push(current);\n    current = dates.add(current, 1, \"day\");\n  }\n  return range;\n};\n\n// Set navigation button behavior\nWorkWeek.navigate = (date, action) => {\n  switch (action) {\n    case Navigate.PREVIOUS:\n      return dates.subtract(date, 7, \"day\");\n\n    case Navigate.NEXT:\n      return dates.add(date, 7, \"day\");\n\n    default:\n      return date;\n  }\n};\n\nWorkWeek.title = date => {\n  return `${date.toLocaleDateString()}`;\n};\n\nexport { WorkWeek };\n"]},"metadata":{},"sourceType":"module"}