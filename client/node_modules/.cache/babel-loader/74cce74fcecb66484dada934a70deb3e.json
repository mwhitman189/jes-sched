{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/client/src/components/EventForm.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggle from \"../hooks/useToggle\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { TeachersContext } from \"../context/TeachersContext\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n\n  const _useContext = useContext(EventsContext),\n        events = _useContext.events,\n        editEvent = _useContext.editEvent,\n        deleteEvent = _useContext.deleteEvent;\n\n  const _useContext2 = useContext(TeachersContext),\n        teachers = _useContext2.teachers;\n\n  const formType = props.formType,\n        setFormType = props.setFormType,\n        startTime = props.startTime,\n        event = props.event,\n        setSelectedEvent = props.setSelectedEvent,\n        selectedTeacher = props.selectedTeacher,\n        updateStartTime = props.updateStartTime,\n        validateRoomAndResource = props.validateRoomAndResource,\n        addEvent = props.addEvent; // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n\n  const startDate = startTime ? startTime : event.start;\n\n  const _useInputState = useInputState(startTime ? moment(startTime).format(\"kk:mm\") : moment(event.start).format(\"kk:mm\")),\n        _useInputState2 = _slicedToArray(_useInputState, 3),\n        start = _useInputState2[0],\n        updateStart = _useInputState2[1],\n        resetStart = _useInputState2[2];\n\n  const startTimeObj = moment(startDate + \" \" + start);\n  console.log(start);\n\n  const _useInputState3 = useInputState(event ? event.title : \"\"),\n        _useInputState4 = _slicedToArray(_useInputState3, 3),\n        title = _useInputState4[0],\n        updateTitle = _useInputState4[1],\n        resetTitle = _useInputState4[2];\n\n  const _useInputState5 = useInputState(event ? event.duration : \"\"),\n        _useInputState6 = _slicedToArray(_useInputState5, 3),\n        duration = _useInputState6[0],\n        updateDuration = _useInputState6[1],\n        resetDuration = _useInputState6[2];\n\n  const _useInputState7 = useInputState(event ? event.resourceId : selectedTeacher),\n        _useInputState8 = _slicedToArray(_useInputState7, 3),\n        resource = _useInputState8[0],\n        updateResource = _useInputState8[1],\n        resetResource = _useInputState8[2];\n\n  const _useInputState9 = useInputState(event ? event.room : \"\"),\n        _useInputState10 = _slicedToArray(_useInputState9, 3),\n        room = _useInputState10[0],\n        updateRoom = _useInputState10[1],\n        resetRoom = _useInputState10[2];\n\n  const _useInputState11 = useInputState(event ? event.type : \"\"),\n        _useInputState12 = _slicedToArray(_useInputState11, 3),\n        eventType = _useInputState12[0],\n        updateEventType = _useInputState12[1],\n        resetEventType = _useInputState12[2];\n\n  const _useToggle = useToggle(false),\n        _useToggle2 = _slicedToArray(_useToggle, 2),\n        isRecurring = _useToggle2[0],\n        toggleIsRecurring = _useToggle2[1];\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  } // If an event does not exist, check whether the selected room is\n  // available at the specified time\n\n\n  ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n    return validateTeacher(events, teacher, startTime, duration);\n  }); // If an event does not exist, check whether the selected room is\n  // available at the specified time\n\n  ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n    return validateRoom(events, room, startTime, duration);\n  });\n\n  const handleUpdateResource = e => {\n    updateResource(e);\n  };\n\n  const handleUpdateRoom = e => {\n    updateRoom(e);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(start);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: resource,\n      type: eventType,\n      recur: isRecurring\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(start);\n    validateRoomAndResource(e, resource, startTimeObj);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj).add(duration, \"m\").toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    editEvent(event, editedEvent);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(event);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  const handleUpdateStartTime = e => {\n    updateStart(e.target.value);\n    updateStartTime(new Date(startDate).setHours(parseInt(e.target.value.slice(0, 2))));\n    console.log(new Date(startDate).setHours(parseInt(e.target.value.slice(0, 2))));\n  };\n\n  return React.createElement(Dialog, {\n    open: formType === \"event\",\n    onClose: hideForm,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: event ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Enter Lesson Info\"), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: isRecurring,\n      onChange: handleToggleRecurrence,\n      value: isRecurring,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }),\n    label: \"Weekly lesson\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: updateTitle,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"startTime\",\n    label: \"Lesson Start Time\",\n    type: \"time\",\n    value: start,\n    onChange: handleUpdateStartTime,\n    InputLabelProps: {\n      shrink: true\n    },\n    inputProps: {\n      step: 300 // 5 min\n\n    },\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Start Time\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Lesson Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: updateDuration,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Teacher\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: updateResource,\n    name: \"resource\",\n    validators: teacherValidators,\n    errorMessages: teacherValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }), teachers.map(t => React.createElement(MenuItem, {\n    key: `teacher-${t.resourceId}`,\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    label: \"Room\",\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: updateRoom,\n    name: \"room\",\n    validators: roomValidators,\n    errorMessages: roomValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: `room-${r}`,\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, r)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    className: classes.selectStyles,\n    margin: \"dense\",\n    label: \"Lesson Type\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"type\",\n    value: eventType,\n    onChange: updateEventType,\n    name: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }), lessonTypes.map(t => React.createElement(MenuItem, {\n    key: `type-${t.shortName}`,\n    value: t.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, t.name))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleDeleteEvent,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"Delete Lesson\"), React.createElement(Button, {\n    onClick: hideForm,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, event ? \"Confirm Change\" : \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/components/EventForm.js"],"names":["React","useContext","useEffect","ValidatorForm","TextValidator","SelectValidator","moment","useInputState","useToggle","validateRoom","validateTeacher","TeachersContext","EventsContext","makeStyles","TextField","MenuItem","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","Switch","roomList","lessonTypes","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","EventForm","props","classes","events","editEvent","deleteEvent","teachers","formType","setFormType","startTime","event","setSelectedEvent","selectedTeacher","updateStartTime","validateRoomAndResource","addEvent","startDate","start","format","updateStart","resetStart","startTimeObj","console","log","title","updateTitle","resetTitle","duration","updateDuration","resetDuration","resourceId","resource","updateResource","resetResource","room","updateRoom","resetRoom","type","eventType","updateEventType","resetEventType","isRecurring","toggleIsRecurring","teacherValidators","teacherValMsgs","roomValidators","roomValMsgs","push","addValidationRule","teacher","handleUpdateResource","e","handleUpdateRoom","hideForm","resetForm","handleAddEvent","preventDefault","Date","end","add","toDate","parseInt","recur","handleEditEvent","editedEvent","handleDeleteEvent","handleToggleRecurrence","handleUpdateStartTime","target","value","setHours","slice","shrink","step","selectStyles","map","t","name","r","shortName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator\n} from \"react-material-ui-form-validator\";\nimport moment from \"moment\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggle from \"../hooks/useToggle\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { TeachersContext } from \"../context/TeachersContext\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const { events, editEvent, deleteEvent } = useContext(EventsContext);\n  const { teachers } = useContext(TeachersContext);\n  const {\n    formType,\n    setFormType,\n    startTime,\n    event,\n    setSelectedEvent,\n    selectedTeacher,\n    updateStartTime,\n    validateRoomAndResource,\n    addEvent\n  } = props;\n\n  // If a new start time was input, use it for the form input,\n  // otherwise use the original event's start time\n  const startDate = startTime ? startTime : event.start;\n\n  const [start, updateStart, resetStart] = useInputState(\n    startTime\n      ? moment(startTime).format(\"kk:mm\")\n      : moment(event.start).format(\"kk:mm\")\n  );\n\n  const startTimeObj = moment(startDate + \" \" + start);\n  console.log(start);\n\n  const [title, updateTitle, resetTitle] = useInputState(\n    event ? event.title : \"\"\n  );\n  const [duration, updateDuration, resetDuration] = useInputState(\n    event ? event.duration : \"\"\n  );\n  const [resource, updateResource, resetResource] = useInputState(\n    event ? event.resourceId : selectedTeacher\n  );\n  const [room, updateRoom, resetRoom] = useInputState(event ? event.room : \"\");\n  const [eventType, updateEventType, resetEventType] = useInputState(\n    event ? event.type : \"\"\n  );\n  const [isRecurring, toggleIsRecurring] = useToggle(false);\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  // If an event does not exist, check whether the selected room is\n  // available at the specified time\n  ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n    return validateTeacher(events, teacher, startTime, duration);\n  });\n\n  // If an event does not exist, check whether the selected room is\n  // available at the specified time\n  ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n    return validateRoom(events, room, startTime, duration);\n  });\n\n  const handleUpdateResource = e => {\n    updateResource(e);\n  };\n\n  const handleUpdateRoom = e => {\n    updateRoom(e);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(start);\n    addEvent({\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: resource,\n      type: eventType,\n      recur: isRecurring\n    });\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    const startTimeObj = new Date(start);\n    validateRoomAndResource(e, resource, startTimeObj);\n    const editedEvent = {\n      title: title,\n      start: startTimeObj,\n      end: moment(startTimeObj)\n        .add(duration, \"m\")\n        .toDate(),\n      room: room,\n      duration: duration,\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring\n    };\n    editEvent(event, editedEvent);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    deleteEvent(event);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  const handleUpdateStartTime = e => {\n    updateStart(e.target.value);\n    updateStartTime(\n      new Date(startDate).setHours(parseInt(e.target.value.slice(0, 2)))\n    );\n    console.log(\n      new Date(startDate).setHours(parseInt(e.target.value.slice(0, 2)))\n    );\n  };\n\n  return (\n    <Dialog\n      open={formType === \"event\"}\n      onClose={hideForm}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <ValidatorForm onSubmit={event ? handleEditEvent : handleAddEvent}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Enter Lesson Info</DialogContentText>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isRecurring}\n                onChange={handleToggleRecurrence}\n                value={isRecurring}\n              />\n            }\n            label=\"Weekly lesson\"\n          />\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={updateTitle}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"startTime\"\n              label=\"Lesson Start Time\"\n              type=\"time\"\n              value={start}\n              onChange={handleUpdateStartTime}\n              InputLabelProps={{\n                shrink: true\n              }}\n              inputProps={{\n                step: 300 // 5 min\n              }}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Start Time\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Lesson Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={updateDuration}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Teacher\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={updateResource}\n              name=\"resource\"\n              validators={teacherValidators}\n              errorMessages={teacherValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {teachers.map(t => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              label=\"Room\"\n              InputLabelProps={{ shrink: true }}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={updateRoom}\n              name=\"room\"\n              validators={roomValidators}\n              errorMessages={roomValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map(r => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              className={classes.selectStyles}\n              margin=\"dense\"\n              label=\"Lesson Type\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"type\"\n              value={eventType}\n              onChange={updateEventType}\n              name=\"type\"\n            >\n              <MenuItem value=\"\" />\n              {lessonTypes.map(t => (\n                <MenuItem key={`type-${t.shortName}`} value={t.type}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteEvent} color=\"secondary\">\n            Delete Lesson\n          </Button>\n          <Button onClick={hideForm} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            {event ? \"Confirm Change\" : \"Add Lesson\"}\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}