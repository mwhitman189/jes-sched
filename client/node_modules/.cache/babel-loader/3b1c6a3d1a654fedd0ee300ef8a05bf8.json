{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { addNewEvent } from \"../helperFunctions\";\nimport { UserContext } from \"../context/UserContext\";\nimport { tokenConfig } from \"../reducers/loadUserReducer\";\nexport default function (initialEvents) {\n  const _useContext = useContext(UserContext),\n        user = _useContext.user;\n\n  const _useState = useState(initialEvents),\n        _useState2 = _slicedToArray(_useState, 2),\n        events = _useState2[0],\n        setEvents = _useState2[1];\n\n  const todaysDate = new Date().getTime();\n\n  const getEvents = async dateTime => {\n    await axios.get(\"/api/lessons\", tokenConfig(user)).then(res => {\n      res.data.forEach(event => {\n        event.start = new Date(event.start);\n        event.end = new Date(event.end); // Check if last recurrence, and if so, create two more months of recurrences\n\n        if (event.isRecurring) {\n          if (true // dateTime.getDate() ===\n          // new Date(dateTime.getYear(), dateTime.getMonth() + 1, 0)\n          ) {\n              console.log(new Date(dateTime.getYear(), dateTime.getMonth() + 1, 0));\n              const newEvents = addNewEvent(event);\n              res.data = [...res.data, newEvents];\n            }\n        }\n      });\n      return setEvents(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  return {\n    events,\n    getEvents: () => {\n      getEvents(todaysDate);\n    },\n    addEvent: async function (event) {\n      const newEvents = addNewEvent(event);\n      await axios.post(\"/api/lessons/add\", newEvents, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      getEvents(todaysDate);\n    },\n    deleteEvent: async function (event) {\n      await axios.delete(`/api/lessons/delete/${event.id}`, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      getEvents(todaysDate);\n    },\n    editEvent: async function (editedEvent) {\n      await axios.put(`/api/lessons/update/${editedEvent._id}`, editedEvent, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      getEvents(todaysDate);\n    }\n  };\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/hooks/useEventsState.js"],"names":["useState","useContext","axios","addNewEvent","UserContext","tokenConfig","initialEvents","user","events","setEvents","todaysDate","Date","getTime","getEvents","dateTime","get","then","res","data","forEach","event","start","end","isRecurring","console","log","getYear","getMonth","newEvents","catch","err","addEvent","post","deleteEvent","delete","id","editEvent","editedEvent","put","_id"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { addNewEvent } from \"../helperFunctions\";\nimport { UserContext } from \"../context/UserContext\";\nimport { tokenConfig } from \"../reducers/loadUserReducer\";\n\nexport default function (initialEvents) {\n  const { user } = useContext(UserContext);\n  const [events, setEvents] = useState(initialEvents);\n  const todaysDate = new Date().getTime();\n\n  const getEvents = async (dateTime) => {\n    await axios\n      .get(\"/api/lessons\", tokenConfig(user))\n      .then((res) => {\n        res.data.forEach((event) => {\n          event.start = new Date(event.start);\n          event.end = new Date(event.end);\n          // Check if last recurrence, and if so, create two more months of recurrences\n          if (event.isRecurring) {\n            if (\n              true\n              // dateTime.getDate() ===\n              // new Date(dateTime.getYear(), dateTime.getMonth() + 1, 0)\n            ) {\n              console.log(\n                new Date(dateTime.getYear(), dateTime.getMonth() + 1, 0)\n              );\n              const newEvents = addNewEvent(event);\n              res.data = [...res.data, newEvents];\n            }\n          }\n        });\n        return setEvents(res.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return {\n    events,\n    getEvents: () => {\n      getEvents(todaysDate);\n    },\n    addEvent: async function (event) {\n      const newEvents = addNewEvent(event);\n      await axios\n        .post(\"/api/lessons/add\", newEvents, tokenConfig(user))\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      getEvents(todaysDate);\n    },\n    deleteEvent: async function (event) {\n      await axios\n        .delete(`/api/lessons/delete/${event.id}`, tokenConfig(user))\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      getEvents(todaysDate);\n    },\n    editEvent: async function (editedEvent) {\n      await axios\n        .put(\n          `/api/lessons/update/${editedEvent._id}`,\n          editedEvent,\n          tokenConfig(user)\n        )\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      getEvents(todaysDate);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}