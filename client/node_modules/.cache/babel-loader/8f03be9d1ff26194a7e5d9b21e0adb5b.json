{"ast":null,"code":"import _objectSpread from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/miles/webdev/jes-sched/client/src/components/EventForm.js\";\nimport React, { useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ValidatorForm, TextValidator, SelectValidator } from \"react-material-ui-form-validator\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggleState from \"../hooks/useToggleState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { TeachersContext } from \"../context/TeachersContext\";\nimport { StudentsContext } from \"../context/StudentsContext\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { checkForSameDate } from \"../helperFunctions\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    display: \"inline\",\n    \"& .MuiFormControl-root\": {\n      margin: \"10px\",\n      width: \"200px\"\n    }\n  },\n  recurSwitch: {\n    position: \"absolute\",\n    right: \"1rem\",\n    top: \"1rem\"\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  timePickerContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"100%\"\n  },\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n}));\nexport default function EventForm(props) {\n  const classes = useStyles();\n\n  const _useContext = useContext(TeachersContext),\n        addTeachingMins = _useContext.addTeachingMins;\n\n  const _useContext2 = useContext(EventsContext),\n        events = _useContext2.events,\n        addEvent = _useContext2.addEvent,\n        editEvent = _useContext2.editEvent,\n        deleteEvent = _useContext2.deleteEvent;\n\n  const _useContext3 = useContext(TeachersContext),\n        teachers = _useContext3.teachers;\n\n  const _useContext4 = useContext(StudentsContext),\n        students = _useContext4.students;\n\n  const formType = props.formType,\n        setFormType = props.setFormType,\n        event = props.event,\n        startTime = props.startTime,\n        setSelectedEvent = props.setSelectedEvent,\n        selectedTeacher = props.selectedTeacher,\n        validateRoomAndResource = props.validateRoomAndResource;\n\n  const _useInputState = useInputState(startTime),\n        _useInputState2 = _slicedToArray(_useInputState, 2),\n        start = _useInputState2[0],\n        setStart = _useInputState2[1];\n\n  const _useInputState3 = useInputState(event ? event.title : \"\"),\n        _useInputState4 = _slicedToArray(_useInputState3, 3),\n        title = _useInputState4[0],\n        setTitle = _useInputState4[1],\n        resetTitle = _useInputState4[2];\n\n  const _useInputState5 = useInputState(event ? event.duration : \"\"),\n        _useInputState6 = _slicedToArray(_useInputState5, 3),\n        duration = _useInputState6[0],\n        setDuration = _useInputState6[1],\n        resetDuration = _useInputState6[2];\n\n  const _useInputState7 = useInputState(event ? event.resourceId : selectedTeacher),\n        _useInputState8 = _slicedToArray(_useInputState7, 3),\n        resource = _useInputState8[0],\n        setResource = _useInputState8[1],\n        resetResource = _useInputState8[2];\n\n  const _useInputState9 = useInputState(event ? event.room : \"\"),\n        _useInputState10 = _slicedToArray(_useInputState9, 3),\n        room = _useInputState10[0],\n        setRoom = _useInputState10[1],\n        resetRoom = _useInputState10[2];\n\n  const _useInputState11 = useInputState(event ? event.type : \"\"),\n        _useInputState12 = _slicedToArray(_useInputState11, 3),\n        eventType = _useInputState12[0],\n        setEventType = _useInputState12[1],\n        resetEventType = _useInputState12[2];\n\n  const _useInputState13 = useInputState(event ? event.students : []),\n        _useInputState14 = _slicedToArray(_useInputState13, 2),\n        members = _useInputState14[0],\n        setMembers = _useInputState14[1];\n\n  const _useToggleState = useToggleState(false),\n        _useToggleState2 = _slicedToArray(_useToggleState, 2),\n        isRecurring = _useToggleState2[0],\n        toggleIsRecurring = _useToggleState2[1];\n\n  const _useToggleState3 = useToggleState(false),\n        _useToggleState4 = _slicedToArray(_useToggleState3, 2),\n        isLoading = _useToggleState4[0],\n        toggleIsLoading = _useToggleState4[1];\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  const now = new Date();\n  const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0); // If an event does not exist, check whether the selected room is\n  // available at the specified time\n\n  ValidatorForm.addValidationRule(\"teacherIsAvailable\", teacher => {\n    return validateTeacher(events, teacher, start, duration);\n  }); // If an event does not exist, check whether the selected room is\n  // available at the specified time\n\n  ValidatorForm.addValidationRule(\"roomIsAvailable\", room => {\n    return validateRoom(events, room, start, duration);\n  });\n\n  const handleTimeChange = date => {\n    setStart(date._d);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = e => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    addEvent({\n      id: uuidv4(),\n      title: title,\n      start: start,\n      end: moment(start).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: parseInt(resource),\n      type: eventType,\n      recur: isRecurring,\n      students: members,\n      attendees: members\n    });\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleEditEvent = e => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    validateRoomAndResource(e, resource, start);\n\n    const editedEvent = _objectSpread({}, event, {\n      title: title,\n      start: start,\n      end: moment(start).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring,\n      students: members,\n      isNewEvent: true\n    });\n\n    editEvent(editedEvent);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleCancelEvent = e => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    let sdCancellation = checkForSameDate(event.start);\n\n    const editedEvent = _objectSpread({}, event, {\n      cancelled: true,\n      sameDayCancellation: sdCancellation\n    });\n\n    editEvent(editedEvent);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    toggleIsLoading(true);\n    deleteEvent(event);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  return React.createElement(Dialog, {\n    open: formType === \"event\",\n    onClose: hideForm,\n    \"aria-labelledby\": \"form-dialog-title\" // Allow TimePicker component to gain focus, preventing stack overflow\n    ,\n    disableEnforceFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(ValidatorForm, {\n    onSubmit: event ? handleEditEvent : handleAddEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"New Lesson\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    className: classes.recurSwitch,\n    control: React.createElement(Switch, {\n      checked: isRecurring,\n      onChange: handleToggleRecurrence,\n      value: isRecurring,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }),\n    label: \"Weekly lesson\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }), React.createElement(FormControl, {\n    className: [classes.formControl, classes.timePickerContainer].join(\" \"),\n    style: {\n      flexDirection: \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(TimePicker, {\n    value: start,\n    onChange: handleTimeChange,\n    minutesStep: 5,\n    margin: \"dense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Lesson Name\",\n    type: \"text\",\n    value: title,\n    onChange: setTitle,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Lesson Name\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    margin: \"dense\",\n    id: \"duration\",\n    label: \"Duration\",\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    value: duration,\n    onChange: setDuration,\n    fullWidth: true,\n    validators: [\"required\"],\n    errorMessages: [\"Enter the Duration\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    classes: {\n      root: classes.root\n    },\n    margin: \"dense\",\n    label: \"Teacher\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"resource\",\n    value: resource,\n    onChange: setResource,\n    name: \"resource\",\n    validators: teacherValidators,\n    errorMessages: teacherValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), teachers.map(t => React.createElement(MenuItem, {\n    key: `teacher-${t.resourceId}`,\n    value: t.resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, t.name)))), React.createElement(FormControl, {\n    fullWidth: true,\n    size: \"medium\",\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"students\",\n    options: students,\n    label: \"Students\",\n    margin: \"dense\",\n    getOptionLabel: option => `${option.givenName} ${option.familyName}`,\n    onChange: (event, newMembers) => {\n      event.students ? setMembers([...event.students, ...newMembers]) : setMembers(newMembers);\n      console.log(newMembers);\n    },\n    multiple: true,\n    filterSelectedOptions: true,\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Students\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    classes: {\n      root: classes.root\n    },\n    label: \"Room\",\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"dense\",\n    fullWidth: true,\n    id: \"room\",\n    value: room,\n    onChange: setRoom,\n    name: \"room\",\n    validators: roomValidators,\n    errorMessages: roomValMsgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }), roomList.map(r => React.createElement(MenuItem, {\n    key: `room-${r}`,\n    value: r,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, r)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344\n    },\n    __self: this\n  }, React.createElement(SelectValidator, {\n    classes: {\n      root: classes.list\n    },\n    margin: \"dense\",\n    label: \"Lesson Type\",\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    id: \"type\",\n    value: eventType,\n    onChange: setEventType,\n    name: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }), lessonTypes.map(t => React.createElement(MenuItem, {\n    key: `type-${t.shortName}`,\n    value: t.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, t.name))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleDeleteEvent,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"Delete Lesson\"), React.createElement(Button, {\n    onClick: handleCancelEvent,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }, \"Cancel Lesson\"), React.createElement(Button, {\n    onClick: hideForm,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, \"Back\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375\n    },\n    __self: this\n  }, event ? \"Confirm Change\" : \"Add Lesson\"))));\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/components/EventForm.js"],"names":["React","useState","useContext","moment","MomentUtils","v4","uuidv4","ValidatorForm","TextValidator","SelectValidator","useInputState","useToggleState","validateRoom","validateTeacher","TeachersContext","StudentsContext","EventsContext","checkForSameDate","roomList","lessonTypes","makeStyles","TimePicker","MuiPickersUtilsProvider","MenuItem","TextField","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","FormControlLabel","Switch","Autocomplete","useStyles","theme","formControl","margin","spacing","minWidth","display","width","recurSwitch","position","right","top","selectEmpty","marginTop","timePickerContainer","justifyContent","root","flexDirection","EventForm","props","classes","addTeachingMins","events","addEvent","editEvent","deleteEvent","teachers","students","formType","setFormType","event","startTime","setSelectedEvent","selectedTeacher","validateRoomAndResource","start","setStart","title","setTitle","resetTitle","duration","setDuration","resetDuration","resourceId","resource","setResource","resetResource","room","setRoom","resetRoom","type","eventType","setEventType","resetEventType","members","setMembers","isRecurring","toggleIsRecurring","isLoading","toggleIsLoading","teacherValidators","teacherValMsgs","roomValidators","roomValMsgs","push","now","Date","monthStart","getFullYear","getMonth","monthEnd","addValidationRule","teacher","handleTimeChange","date","_d","hideForm","resetForm","handleAddEvent","e","preventDefault","id","end","add","toDate","parseInt","recur","attendees","handleEditEvent","editedEvent","isNewEvent","handleCancelEvent","sdCancellation","cancelled","sameDayCancellation","handleDeleteEvent","handleToggleRecurrence","join","shrink","map","t","name","option","givenName","familyName","newMembers","console","log","params","r","list","shortName"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  ValidatorForm,\n  TextValidator,\n  SelectValidator,\n} from \"react-material-ui-form-validator\";\nimport useInputState from \"../hooks/useInputState\";\nimport useToggleState from \"../hooks/useToggleState\";\nimport { validateRoom, validateTeacher } from \"../validators\";\nimport { TeachersContext } from \"../context/TeachersContext\";\nimport { StudentsContext } from \"../context/StudentsContext\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { checkForSameDate } from \"../helperFunctions\";\nimport roomList from \"../rooms\";\nimport lessonTypes from \"../lessonTypes\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    display: \"inline\",\n    \"& .MuiFormControl-root\": {\n      margin: \"10px\",\n      width: \"200px\",\n    },\n  },\n  recurSwitch: {\n    position: \"absolute\",\n    right: \"1rem\",\n    top: \"1rem\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  timePickerContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"100%\",\n  },\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\nexport default function EventForm(props) {\n  const classes = useStyles();\n  const { addTeachingMins } = useContext(TeachersContext);\n  const { events, addEvent, editEvent, deleteEvent } = useContext(\n    EventsContext\n  );\n  const { teachers } = useContext(TeachersContext);\n  const { students } = useContext(StudentsContext);\n  const {\n    formType,\n    setFormType,\n    event,\n    startTime,\n    setSelectedEvent,\n    selectedTeacher,\n    validateRoomAndResource,\n  } = props;\n\n  const [start, setStart] = useInputState(startTime);\n  const [title, setTitle, resetTitle] = useInputState(event ? event.title : \"\");\n  const [duration, setDuration, resetDuration] = useInputState(\n    event ? event.duration : \"\"\n  );\n  const [resource, setResource, resetResource] = useInputState(\n    event ? event.resourceId : selectedTeacher\n  );\n  const [room, setRoom, resetRoom] = useInputState(event ? event.room : \"\");\n  const [eventType, setEventType, resetEventType] = useInputState(\n    event ? event.type : \"\"\n  );\n  const [members, setMembers] = useInputState(event ? event.students : []);\n  const [isRecurring, toggleIsRecurring] = useToggleState(false);\n  const [isLoading, toggleIsLoading] = useToggleState(false);\n\n  let teacherValidators = [\"required\"];\n  let teacherValMsgs = [\"Teacher Required\"];\n  let roomValidators = [\"required\"];\n  let roomValMsgs = [\"Room Required\"];\n  if (!event) {\n    teacherValidators.push(\"teacherIsAvailable\");\n    teacherValMsgs.push(\"Teacher unavailable\");\n    roomValidators.push(\"roomIsAvailable\");\n    roomValMsgs.push(\"Room unavailable\");\n  }\n\n  const now = new Date();\n  const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n  // If an event does not exist, check whether the selected room is\n  // available at the specified time\n  ValidatorForm.addValidationRule(\"teacherIsAvailable\", (teacher) => {\n    return validateTeacher(events, teacher, start, duration);\n  });\n\n  // If an event does not exist, check whether the selected room is\n  // available at the specified time\n  ValidatorForm.addValidationRule(\"roomIsAvailable\", (room) => {\n    return validateRoom(events, room, start, duration);\n  });\n\n  const handleTimeChange = (date) => {\n    setStart(date._d);\n  };\n\n  const hideForm = () => {\n    resetForm();\n    setFormType(\"\");\n  };\n\n  const resetForm = () => {\n    resetTitle();\n    resetDuration();\n    resetResource();\n    resetRoom();\n    resetEventType();\n    toggleIsRecurring(false);\n    setSelectedEvent(\"\");\n  };\n\n  const handleAddEvent = (e) => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    addEvent({\n      id: uuidv4(),\n      title: title,\n      start: start,\n      end: moment(start).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: parseInt(resource),\n      type: eventType,\n      recur: isRecurring,\n      students: members,\n      attendees: members,\n    });\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleEditEvent = (e) => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    validateRoomAndResource(e, resource, start);\n    const editedEvent = {\n      ...event,\n      title: title,\n      start: start,\n      end: moment(start).add(duration, \"m\").toDate(),\n      room: room,\n      duration: parseInt(duration),\n      resourceId: parseInt(resource),\n      type: eventType,\n      isRecurring: isRecurring,\n      students: members,\n      isNewEvent: true,\n    };\n    editEvent(editedEvent);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleCancelEvent = (e) => {\n    e.preventDefault();\n    toggleIsLoading(true);\n    let sdCancellation = checkForSameDate(event.start);\n    const editedEvent = {\n      ...event,\n      cancelled: true,\n      sameDayCancellation: sdCancellation,\n    };\n    editEvent(editedEvent);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleDeleteEvent = () => {\n    toggleIsLoading(true);\n    deleteEvent(event);\n    addTeachingMins(events, monthStart, monthEnd);\n    toggleIsLoading(false);\n    hideForm();\n  };\n\n  const handleToggleRecurrence = () => {\n    toggleIsRecurring(!isRecurring);\n  };\n\n  return (\n    <Dialog\n      open={formType === \"event\"}\n      onClose={hideForm}\n      aria-labelledby=\"form-dialog-title\"\n      // Allow TimePicker component to gain focus, preventing stack overflow\n      disableEnforceFocus\n    >\n      <ValidatorForm onSubmit={event ? handleEditEvent : handleAddEvent}>\n        <DialogTitle id=\"form-dialog-title\">New Lesson</DialogTitle>\n        <DialogContent>\n          <FormControlLabel\n            className={classes.recurSwitch}\n            control={\n              <Switch\n                checked={isRecurring}\n                onChange={handleToggleRecurrence}\n                value={isRecurring}\n              />\n            }\n            label=\"Weekly lesson\"\n          />\n          <FormControl\n            className={[classes.formControl, classes.timePickerContainer].join(\n              \" \"\n            )}\n            style={{ flexDirection: \"row\" }}\n          >\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n              <TimePicker\n                value={start}\n                onChange={handleTimeChange}\n                minutesStep={5}\n                margin=\"dense\"\n              />\n            </MuiPickersUtilsProvider>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Lesson Name\"\n              type=\"text\"\n              value={title}\n              onChange={setTitle}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Lesson Name\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextValidator\n              margin=\"dense\"\n              id=\"duration\"\n              label=\"Duration\"\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              value={duration}\n              onChange={setDuration}\n              fullWidth\n              validators={[\"required\"]}\n              errorMessages={[\"Enter the Duration\"]}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              classes={{ root: classes.root }}\n              margin=\"dense\"\n              label=\"Teacher\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"resource\"\n              value={resource}\n              onChange={setResource}\n              name=\"resource\"\n              validators={teacherValidators}\n              errorMessages={teacherValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {teachers.map((t) => (\n                <MenuItem key={`teacher-${t.resourceId}`} value={t.resourceId}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl fullWidth size=\"medium\" className={classes.formControl}>\n            <Autocomplete\n              id=\"students\"\n              options={students}\n              label=\"Students\"\n              margin=\"dense\"\n              getOptionLabel={(option) =>\n                `${option.givenName} ${option.familyName}`\n              }\n              onChange={(event, newMembers) => {\n                event.students\n                  ? setMembers([...event.students, ...newMembers])\n                  : setMembers(newMembers);\n                console.log(newMembers);\n              }}\n              multiple\n              filterSelectedOptions\n              renderInput={(params) => (\n                <TextField {...params} label=\"Students\" variant=\"outlined\" />\n              )}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              classes={{ root: classes.root }}\n              label=\"Room\"\n              InputLabelProps={{ shrink: true }}\n              margin=\"dense\"\n              fullWidth\n              id=\"room\"\n              value={room}\n              onChange={setRoom}\n              name=\"room\"\n              validators={roomValidators}\n              errorMessages={roomValMsgs}\n            >\n              <MenuItem value=\"\" />\n              {roomList.map((r) => (\n                <MenuItem key={`room-${r}`} value={r}>\n                  {r}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <SelectValidator\n              classes={{ root: classes.list }}\n              margin=\"dense\"\n              label=\"Lesson Type\"\n              InputLabelProps={{ shrink: true }}\n              fullWidth\n              id=\"type\"\n              value={eventType}\n              onChange={setEventType}\n              name=\"type\"\n            >\n              <MenuItem value=\"\" />\n              {lessonTypes.map((t) => (\n                <MenuItem key={`type-${t.shortName}`} value={t.type}>\n                  {t.name}\n                </MenuItem>\n              ))}\n            </SelectValidator>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteEvent} color=\"secondary\">\n            Delete Lesson\n          </Button>\n          <Button onClick={handleCancelEvent} color=\"secondary\">\n            Cancel Lesson\n          </Button>\n          <Button onClick={hideForm} color=\"primary\">\n            Back\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            {event ? \"Confirm Change\" : \"Add Lesson\"}\n          </Button>\n        </DialogActions>\n      </ValidatorForm>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}