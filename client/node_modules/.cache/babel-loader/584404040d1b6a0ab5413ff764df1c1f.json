{"ast":null,"code":"import _slicedToArray from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { addNewEvent } from \"../helperFunctions\";\nimport { UserContext } from \"../context/UserContext\";\nimport { tokenConfig } from \"../reducers/loadUserReducer\";\nexport default function (initialEvents) {\n  const _useContext = useContext(UserContext),\n        user = _useContext.user;\n\n  const _useState = useState(initialEvents),\n        _useState2 = _slicedToArray(_useState, 2),\n        events = _useState2[0],\n        setEvents = _useState2[1];\n\n  return {\n    events,\n    getEvents: async function (dateTime) {\n      await axios.get(\"/api/lessons\", tokenConfig(user)).then(res => {\n        res.data.forEach(event => {\n          event.start = new Date(event.start);\n          event.end = new Date(event.end); // Check if last recurrence, and if so, create two more months of recurrences\n\n          if (event.isLast) {\n            if (dateTime >= event.start.getTime()) {\n              const newEvents = addNewEvent(event);\n              res.data = [...res.data, newEvents];\n            }\n          }\n        });\n        return setEvents(res.data);\n      }).catch(err => console.log(err));\n    },\n    addEvent: async function (event) {\n      const newEvents = addNewEvent(event);\n      const updatedEvents = [...events, ...newEvents];\n      await axios.post(\"/api/lessons/add\", newEvents, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      setEvents(updatedEvents);\n    },\n    deleteEvent: async function (event) {\n      await axios.delete(`/api/lessons/delete/${event._id}`, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      const updatedEvents = events.filter(evt => evt._id !== event._id);\n      this.getEvents();\n    },\n    editEvent: async function (event, editedEvent) {\n      await axios.put(`/api/lessons/update/${event._id}`, editedEvent, tokenConfig(user)).then(res => console.log(res.data)).catch(err => console.log(err));\n      const idx = events.findIndex(evt => evt._id === event._id);\n      const updatedEvents = [...events];\n      updatedEvents.splice(idx, 1, editedEvent);\n      setEvents(updatedEvents);\n    }\n  };\n}","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/hooks/useEventsState.js"],"names":["useState","useContext","axios","addNewEvent","UserContext","tokenConfig","initialEvents","user","events","setEvents","getEvents","dateTime","get","then","res","data","forEach","event","start","Date","end","isLast","getTime","newEvents","catch","err","console","log","addEvent","updatedEvents","post","deleteEvent","delete","_id","filter","evt","editEvent","editedEvent","put","idx","findIndex","splice"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { addNewEvent } from \"../helperFunctions\";\nimport { UserContext } from \"../context/UserContext\";\nimport { tokenConfig } from \"../reducers/loadUserReducer\";\n\nexport default function (initialEvents) {\n  const { user } = useContext(UserContext);\n  const [events, setEvents] = useState(initialEvents);\n\n  return {\n    events,\n    getEvents: async function (dateTime) {\n      await axios\n        .get(\"/api/lessons\", tokenConfig(user))\n        .then((res) => {\n          res.data.forEach((event) => {\n            event.start = new Date(event.start);\n            event.end = new Date(event.end);\n            // Check if last recurrence, and if so, create two more months of recurrences\n            if (event.isLast) {\n              if (dateTime >= event.start.getTime()) {\n                const newEvents = addNewEvent(event);\n                res.data = [...res.data, newEvents];\n              }\n            }\n          });\n          return setEvents(res.data);\n        })\n        .catch((err) => console.log(err));\n    },\n    addEvent: async function (event) {\n      const newEvents = addNewEvent(event);\n      const updatedEvents = [...events, ...newEvents];\n      await axios\n        .post(\"/api/lessons/add\", newEvents, tokenConfig(user))\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      setEvents(updatedEvents);\n    },\n    deleteEvent: async function (event) {\n      await axios\n        .delete(`/api/lessons/delete/${event._id}`, tokenConfig(user))\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      const updatedEvents = events.filter((evt) => evt._id !== event._id);\n      this.getEvents();\n    },\n    editEvent: async function (event, editedEvent) {\n      await axios\n        .put(`/api/lessons/update/${event._id}`, editedEvent, tokenConfig(user))\n        .then((res) => console.log(res.data))\n        .catch((err) => console.log(err));\n      const idx = events.findIndex((evt) => evt._id === event._id);\n      const updatedEvents = [...events];\n      updatedEvents.splice(idx, 1, editedEvent);\n      setEvents(updatedEvents);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}