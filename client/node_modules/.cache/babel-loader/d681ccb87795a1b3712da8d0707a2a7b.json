{"ast":null,"code":"import _objectSpread from \"/home/miles/webdev/jes-sched/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from \"axios\";\nimport { RRule } from \"rrule\";\nimport moment from \"moment\";\n\nconst JapaneseHolidays = require(\"japanese-holidays\"); // TODO: Edit months_start and months_end to accomodate renewal of recurrences.\n\n\nconst getRecurrences = event => {\n  const now = new Date(); // Create start and end dates for the current month to calc\n  // teaching minutes\n\n  const months_start = new Date(now.getFullYear(), now.getMonth(), 1);\n  const months_end = new Date(now.getFullYear(), now.getMonth() + 2, 0); // Create an array of DateTimes for the recurrence of events.\n\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start)\n  });\n  const twoMonthsRecurrences = rrule.between(months_start, months_end); // Remove redundant event\n\n  twoMonthsRecurrences.shift();\n  return twoMonthsRecurrences;\n};\n\nconst updateRecurrences = event => {\n  const now = new Date();\n  const month_start = new Date(now.getFullYear(), now.getMonth() + 1, 1);\n  const month_end = new Date(now.getFullYear(), now.getMonth() + 2, 0); // Create an array of DateTimes for the recurrence of events.\n\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start)\n  });\n  const oneMonthsRecurrences = rrule.between(month_start, month_end); // Remove redundant event\n\n  oneMonthsRecurrences.shift();\n  return oneMonthsRecurrences;\n};\n\nconst calcDutyHours = (dutyHours, start) => {\n  // Check whether the current event is earliest lesson\n  if (moment(start) < dutyHours.startTime) {\n    dutyHours.startTime = moment(start); // Add 9 hours to the DH start time to ensure a minimum of 9 DH\n\n    dutyHours.endTime = moment(dutyHours.startTime).add(9, \"hours\");\n  }\n\n  return dutyHours;\n}; // Check whether a cancellation took place on the same day of the class\n\n\nconst checkForSameDate = eventStart => {\n  if (eventStart) {\n    const todaysDate = new Date();\n    return eventStart.getDate() === todaysDate.getDate();\n  } else {\n    return console.log(\"Event does not exist\");\n  }\n};\n\nconst calcOutsideDutyMins = (eventStart, eventEnd, duration, dutyHoursStart, dutyHoursEnd) => {\n  // Calculate difference in hours between the duty hours start time and the lesson start time\n  const startDiff = dutyHoursStart.diff(eventStart, \"minutes\");\n  const endDiff = dutyHoursStart.diff(eventEnd, \"minutes\"); // Calculate difference in hours between the duty hours end time and the lesson end time\n\n  const afterDhEndDiff = -dutyHoursEnd.diff(eventEnd, \"minutes\");\n  const afterDhStartDiff = -dutyHoursEnd.diff(eventStart, \"minutes\");\n  let outsideDutyMins;\n\n  if (startDiff <= 0 && afterDhEndDiff <= 0) {\n    outsideDutyMins = 0;\n    return {\n      teachingMins: duration,\n      outsideDutyMins: outsideDutyMins\n    };\n  } else if (startDiff > 0 && endDiff > 0 || afterDhEndDiff > 0 && afterDhStartDiff > 0) {\n    return {\n      teachingMins: 0,\n      outsideDutyMins: duration\n    };\n  } else if (startDiff > 0) {\n    const regularTeachingMins = duration - startDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: startDiff\n    };\n  } else {\n    const regularTeachingMins = duration - afterDhEndDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: afterDhEndDiff\n    };\n  }\n};\n\nconst createPayPeriodData = (events, teacher, monthStart, monthEnd) => {\n  // Creates an object of dates containing minutes worked, by work type\n  const datesData = {};\n  teacher.teachingMins = 0;\n  teacher.outsideDutyMins = 0;\n  teacher.holidayMins = 0;\n  teacher.overThresholdOneMins = 0;\n  teacher.overThresholdTwoMins = 0;\n  const monthEvents = events.filter(e => {\n    return moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\") && e.resourceId === teacher.resourceId;\n  });\n  const dutyHoursByDate = {};\n  monthEvents.forEach(e => {\n    const date = e.start.getDate(); // Set the base duty hours to noon to ensure at least 9 duty hours\n\n    if (!dutyHoursByDate[date]) {\n      const baseDutyHours = {\n        startTime: moment(e.start).set(\"hour\", 12).set(\"minutes\", 0),\n        endTime: moment(e.start).set(\"hour\", 21).set(\"minutes\", 0)\n      }; // Set the duty hours for the event's date\n\n      dutyHoursByDate[date] = calcDutyHours(baseDutyHours, e.start, e.end);\n    } else {\n      // Set the duty hours for the event's date\n      dutyHoursByDate[date] = calcDutyHours(dutyHoursByDate[date], e.start, e.end);\n    }\n  });\n  monthEvents.forEach(e => {\n    if (e.sameDayCancellation || !e.cancelled) {\n      if (moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\")) {\n        if (e.resourceId === teacher.resourceId) {\n          const date = e.start.getDate();\n          const day = e.start.getDay(); // Calculate number of minutes to add to first threshold to calc second threshold. (10 hours * 60 mins)\n\n          const secondThreshold = 10 * 60;\n          let teachingMins = 0;\n          let outsideDutyMins = 0;\n          let holidayMins = 0; // If event falls on a national holiday, add the class duration to holiday minutes,\n          // otherwise, add to total teaching minutes\n\n          if (JapaneseHolidays.isHoliday(e.start) || e.start.getDay() === (0 || 1)) {\n            holidayMins = e.duration;\n            teacher.holidayMins += holidayMins;\n          } else {\n            const totalTeachingMins = calcOutsideDutyMins(e.start, e.end, e.duration, dutyHoursByDate[date].startTime, dutyHoursByDate[date].endTime); // Add total teaching minutes and outside duty minutes to teacher object\n\n            teachingMins = totalTeachingMins.teachingMins;\n            teacher.teachingMins += teachingMins;\n            outsideDutyMins = totalTeachingMins.outsideDutyMins;\n            teacher.outsideDutyMins += outsideDutyMins; // Calculate hours worked over monthly thresholds two and one\n\n            const otThOneTotalMins = teacher.otThreshold;\n            const otThTwoTotalMins = otThOneTotalMins + secondThreshold;\n\n            if (teacher.teachingMins > otThTwoTotalMins) {\n              teacher.overThresholdTwoMins += e.duration;\n            } else if (teacher.teachingMins > otThOneTotalMins) {\n              if (otThOneTotalMins + e.duration > otThTwoTotalMins) {\n                teacher.overThresholdTwoMins += otThOneTotalMins + e.duration - otThTwoTotalMins;\n                teacher.overThresholdOneMins = otThOneTotalMins;\n              } else {\n                teacher.overThresholdOneMins += e.duration;\n              }\n            } else if (teacher.teachingMins + e.duration > otThOneTotalMins) {\n              teacher.overThresholdOneMins += teacher.teachingMins + e.duration - otThOneTotalMins;\n            }\n          } // Teaching minutes object to be added to hash table\n\n\n          const dateData = {\n            resourceId: teacher.resourceId,\n            date: date,\n            day: day,\n            teachingMins: teachingMins,\n            outsideDutyMins: outsideDutyMins,\n            holidayMins: holidayMins,\n            travelAllowance: 0,\n            travelExpenses: 0\n          }; // If date already in hash table, add teaching minutes to existing keys, otherwise create\n          // a new date object\n\n          if (datesData[date]) {\n            datesData[date].teachingMins += dateData.teachingMins;\n            datesData[date].outsideDutyMins += dateData.outsideDutyMins;\n            datesData[date].holidayMins += dateData.holidayMins;\n            datesData[date].travelAllowance += dateData.travelAllowance;\n            datesData[date].travelExpenses += dateData.travelExpenses;\n          } else {\n            datesData[date] = dateData;\n          }\n        }\n      }\n    }\n  });\n  datesData.overThresholdOneMins = teacher.overThresholdOneMins;\n  datesData.overThresholdTwoMins = teacher.overThresholdTwoMins;\n  return datesData;\n};\n\nconst addNewEvent = (event, isNew) => {\n  const newEvents = [];\n\n  if (event.recur === true) {\n    if (isNew === true) {\n      const recurrences = getRecurrences(event);\n    } else {\n      const recurrences = updateRecurrences(event);\n    }\n\n    recurrences.map(r => {\n      const newEvent = _objectSpread({}, event, {\n        start: r,\n        end: moment(r).add(event.duration, \"m\").toDate(),\n        isNewEvent: false,\n        isLast: false\n      });\n\n      if (JapaneseHolidays.isHoliday(r)) {\n        newEvent.isHoliday = true;\n      }\n\n      newEvents.push(newEvent);\n    });\n    newEvents[newEvents.length - 1].isLast = true;\n  }\n\n  if (JapaneseHolidays.isHoliday(event.start)) {\n    event = _objectSpread({}, event, {\n      isHoliday: true\n    });\n  }\n\n  event = _objectSpread({}, event, {\n    isNewEvent: true\n  });\n  newEvents.unshift(event);\n  return newEvents;\n};\n\nconst addPayment = async newPayment => {\n  return await axios.post(`/payments/add`, newPayment).then(res => console.log(res.data)).catch(err => console.log(err));\n};\n\nconst protectAction = (user, action) => {\n  if (user.user.role === \"staff\") {\n    return action;\n  }\n\n  return console.log(\"Not gonna do it. Wouldn't be prudent.\");\n};\n\nexport { getRecurrences, updateRecurrences, addNewEvent, addPayment, createPayPeriodData, protectAction, checkForSameDate };","map":{"version":3,"sources":["/home/miles/webdev/jes-sched/client/src/helperFunctions.js"],"names":["axios","RRule","moment","JapaneseHolidays","require","getRecurrences","event","now","Date","months_start","getFullYear","getMonth","months_end","rrule","freq","WEEKLY","count","interval","dtstart","start","twoMonthsRecurrences","between","shift","updateRecurrences","month_start","month_end","oneMonthsRecurrences","calcDutyHours","dutyHours","startTime","endTime","add","checkForSameDate","eventStart","todaysDate","getDate","console","log","calcOutsideDutyMins","eventEnd","duration","dutyHoursStart","dutyHoursEnd","startDiff","diff","endDiff","afterDhEndDiff","afterDhStartDiff","outsideDutyMins","teachingMins","regularTeachingMins","createPayPeriodData","events","teacher","monthStart","monthEnd","datesData","holidayMins","overThresholdOneMins","overThresholdTwoMins","monthEvents","filter","e","isBetween","resourceId","dutyHoursByDate","forEach","date","baseDutyHours","set","end","sameDayCancellation","cancelled","day","getDay","secondThreshold","isHoliday","totalTeachingMins","otThOneTotalMins","otThreshold","otThTwoTotalMins","dateData","travelAllowance","travelExpenses","addNewEvent","isNew","newEvents","recur","recurrences","map","r","newEvent","toDate","isNewEvent","isLast","push","length","unshift","addPayment","newPayment","post","then","res","data","catch","err","protectAction","user","action","role"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { RRule } from \"rrule\";\nimport moment from \"moment\";\n\nconst JapaneseHolidays = require(\"japanese-holidays\");\n// TODO: Edit months_start and months_end to accomodate renewal of recurrences.\nconst getRecurrences = (event) => {\n  const now = new Date();\n  // Create start and end dates for the current month to calc\n  // teaching minutes\n  const months_start = new Date(now.getFullYear(), now.getMonth(), 1);\n  const months_end = new Date(now.getFullYear(), now.getMonth() + 2, 0);\n  // Create an array of DateTimes for the recurrence of events.\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start),\n  });\n  const twoMonthsRecurrences = rrule.between(months_start, months_end);\n  // Remove redundant event\n  twoMonthsRecurrences.shift();\n  return twoMonthsRecurrences;\n};\n\nconst updateRecurrences = (event) => {\n  const now = new Date();\n  const month_start = new Date(now.getFullYear(), now.getMonth() + 1, 1);\n  const month_end = new Date(now.getFullYear(), now.getMonth() + 2, 0);\n  // Create an array of DateTimes for the recurrence of events.\n  const rrule = new RRule({\n    freq: RRule.WEEKLY,\n    count: 26,\n    interval: 1,\n    dtstart: new Date(event.start),\n  });\n  const oneMonthsRecurrences = rrule.between(month_start, month_end);\n  // Remove redundant event\n  oneMonthsRecurrences.shift();\n  return oneMonthsRecurrences;\n};\n\nconst calcDutyHours = (dutyHours, start) => {\n  // Check whether the current event is earliest lesson\n  if (moment(start) < dutyHours.startTime) {\n    dutyHours.startTime = moment(start);\n\n    // Add 9 hours to the DH start time to ensure a minimum of 9 DH\n    dutyHours.endTime = moment(dutyHours.startTime).add(9, \"hours\");\n  }\n\n  return dutyHours;\n};\n\n// Check whether a cancellation took place on the same day of the class\nconst checkForSameDate = (eventStart) => {\n  if (eventStart) {\n    const todaysDate = new Date();\n    return eventStart.getDate() === todaysDate.getDate();\n  } else {\n    return console.log(\"Event does not exist\");\n  }\n};\n\nconst calcOutsideDutyMins = (\n  eventStart,\n  eventEnd,\n  duration,\n  dutyHoursStart,\n  dutyHoursEnd\n) => {\n  // Calculate difference in hours between the duty hours start time and the lesson start time\n  const startDiff = dutyHoursStart.diff(eventStart, \"minutes\");\n  const endDiff = dutyHoursStart.diff(eventEnd, \"minutes\");\n\n  // Calculate difference in hours between the duty hours end time and the lesson end time\n  const afterDhEndDiff = -dutyHoursEnd.diff(eventEnd, \"minutes\");\n  const afterDhStartDiff = -dutyHoursEnd.diff(eventStart, \"minutes\");\n\n  let outsideDutyMins;\n  if (startDiff <= 0 && afterDhEndDiff <= 0) {\n    outsideDutyMins = 0;\n    return {\n      teachingMins: duration,\n      outsideDutyMins: outsideDutyMins,\n    };\n  } else if (\n    (startDiff > 0 && endDiff > 0) ||\n    (afterDhEndDiff > 0 && afterDhStartDiff > 0)\n  ) {\n    return {\n      teachingMins: 0,\n      outsideDutyMins: duration,\n    };\n  } else if (startDiff > 0) {\n    const regularTeachingMins = duration - startDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: startDiff,\n    };\n  } else {\n    const regularTeachingMins = duration - afterDhEndDiff;\n    return {\n      teachingMins: regularTeachingMins,\n      outsideDutyMins: afterDhEndDiff,\n    };\n  }\n};\n\nconst createPayPeriodData = (events, teacher, monthStart, monthEnd) => {\n  // Creates an object of dates containing minutes worked, by work type\n  const datesData = {};\n  teacher.teachingMins = 0;\n  teacher.outsideDutyMins = 0;\n  teacher.holidayMins = 0;\n  teacher.overThresholdOneMins = 0;\n  teacher.overThresholdTwoMins = 0;\n\n  const monthEvents = events.filter((e) => {\n    return (\n      moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\") &&\n      e.resourceId === teacher.resourceId\n    );\n  });\n\n  const dutyHoursByDate = {};\n\n  monthEvents.forEach((e) => {\n    const date = e.start.getDate();\n    // Set the base duty hours to noon to ensure at least 9 duty hours\n    if (!dutyHoursByDate[date]) {\n      const baseDutyHours = {\n        startTime: moment(e.start).set(\"hour\", 12).set(\"minutes\", 0),\n        endTime: moment(e.start).set(\"hour\", 21).set(\"minutes\", 0),\n      };\n      // Set the duty hours for the event's date\n      dutyHoursByDate[date] = calcDutyHours(baseDutyHours, e.start, e.end);\n    } else {\n      // Set the duty hours for the event's date\n      dutyHoursByDate[date] = calcDutyHours(\n        dutyHoursByDate[date],\n        e.start,\n        e.end\n      );\n    }\n  });\n\n  monthEvents.forEach((e) => {\n    if (e.sameDayCancellation || !e.cancelled) {\n      if (moment(e.start).isBetween(monthStart, monthEnd, null, \"[]\")) {\n        if (e.resourceId === teacher.resourceId) {\n          const date = e.start.getDate();\n          const day = e.start.getDay();\n          // Calculate number of minutes to add to first threshold to calc second threshold. (10 hours * 60 mins)\n          const secondThreshold = 10 * 60;\n          let teachingMins = 0;\n          let outsideDutyMins = 0;\n          let holidayMins = 0;\n\n          // If event falls on a national holiday, add the class duration to holiday minutes,\n          // otherwise, add to total teaching minutes\n\n          if (\n            JapaneseHolidays.isHoliday(e.start) ||\n            e.start.getDay() === (0 || 1)\n          ) {\n            holidayMins = e.duration;\n            teacher.holidayMins += holidayMins;\n          } else {\n            const totalTeachingMins = calcOutsideDutyMins(\n              e.start,\n              e.end,\n              e.duration,\n              dutyHoursByDate[date].startTime,\n              dutyHoursByDate[date].endTime\n            );\n\n            // Add total teaching minutes and outside duty minutes to teacher object\n            teachingMins = totalTeachingMins.teachingMins;\n            teacher.teachingMins += teachingMins;\n            outsideDutyMins = totalTeachingMins.outsideDutyMins;\n            teacher.outsideDutyMins += outsideDutyMins;\n\n            // Calculate hours worked over monthly thresholds two and one\n            const otThOneTotalMins = teacher.otThreshold;\n            const otThTwoTotalMins = otThOneTotalMins + secondThreshold;\n            if (teacher.teachingMins > otThTwoTotalMins) {\n              teacher.overThresholdTwoMins += e.duration;\n            } else if (teacher.teachingMins > otThOneTotalMins) {\n              if (otThOneTotalMins + e.duration > otThTwoTotalMins) {\n                teacher.overThresholdTwoMins +=\n                  otThOneTotalMins + e.duration - otThTwoTotalMins;\n                teacher.overThresholdOneMins = otThOneTotalMins;\n              } else {\n                teacher.overThresholdOneMins += e.duration;\n              }\n            } else if (teacher.teachingMins + e.duration > otThOneTotalMins) {\n              teacher.overThresholdOneMins +=\n                teacher.teachingMins + e.duration - otThOneTotalMins;\n            }\n          }\n\n          // Teaching minutes object to be added to hash table\n          const dateData = {\n            resourceId: teacher.resourceId,\n            date: date,\n            day: day,\n            teachingMins: teachingMins,\n            outsideDutyMins: outsideDutyMins,\n            holidayMins: holidayMins,\n            travelAllowance: 0,\n            travelExpenses: 0,\n          };\n\n          // If date already in hash table, add teaching minutes to existing keys, otherwise create\n          // a new date object\n          if (datesData[date]) {\n            datesData[date].teachingMins += dateData.teachingMins;\n            datesData[date].outsideDutyMins += dateData.outsideDutyMins;\n            datesData[date].holidayMins += dateData.holidayMins;\n            datesData[date].travelAllowance += dateData.travelAllowance;\n            datesData[date].travelExpenses += dateData.travelExpenses;\n          } else {\n            datesData[date] = dateData;\n          }\n        }\n      }\n    }\n  });\n  datesData.overThresholdOneMins = teacher.overThresholdOneMins;\n  datesData.overThresholdTwoMins = teacher.overThresholdTwoMins;\n\n  return datesData;\n};\n\nconst addNewEvent = (event, isNew) => {\n  const newEvents = [];\n  if (event.recur === true) {\n    if (isNew === true) {\n      const recurrences = getRecurrences(event);\n    } else {\n      const recurrences = updateRecurrences(event);\n    }\n    recurrences.map((r) => {\n      const newEvent = {\n        ...event,\n        start: r,\n        end: moment(r).add(event.duration, \"m\").toDate(),\n        isNewEvent: false,\n        isLast: false,\n      };\n      if (JapaneseHolidays.isHoliday(r)) {\n        newEvent.isHoliday = true;\n      }\n      newEvents.push(newEvent);\n    });\n    newEvents[newEvents.length - 1].isLast = true;\n  }\n  if (JapaneseHolidays.isHoliday(event.start)) {\n    event = { ...event, isHoliday: true };\n  }\n  event = { ...event, isNewEvent: true };\n  newEvents.unshift(event);\n\n  return newEvents;\n};\n\nconst addPayment = async (newPayment) => {\n  return await axios\n    .post(`/payments/add`, newPayment)\n    .then((res) => console.log(res.data))\n    .catch((err) => console.log(err));\n};\n\nconst protectAction = (user, action) => {\n  if (user.user.role === \"staff\") {\n    return action;\n  }\n  return console.log(\"Not gonna do it. Wouldn't be prudent.\");\n};\n\nexport {\n  getRecurrences,\n  updateRecurrences,\n  addNewEvent,\n  addPayment,\n  createPayPeriodData,\n  protectAction,\n  checkForSameDate,\n};\n"]},"metadata":{},"sourceType":"module"}